{"version":3,"sources":["components/activity/ActivityForm.tsx","utilities/SessionHandler.tsx","components/search/SearchResult.tsx","components/NotificationBox.tsx","components/search/SearchBar.tsx","components/GoogleFit.tsx","components/activity/ActivityModal.tsx","img/Logo.png","components/Head.tsx","components/Foot.tsx","utilities/Formatter.tsx","components/comments/Comment.tsx","components/comments/CommentContainer.tsx","components/activity/ActivityBox.tsx","components/Feed/FeedContent.tsx","components/Feed/FeedContainer.tsx","components/FullCalendar.tsx","components/Charts.tsx","pages/Homepage.tsx","components/login/Login.tsx","utilities/RegexValidator.tsx","components/login/SignUp.tsx","pages/LoginContainer.tsx","utilities/Routing.tsx","components/login/Verify.tsx","components/login/SuccessfulSignUp.tsx","components/profile/ProfileActivityBox.tsx","components/profile/ProfileActivities.tsx","pages/ProfilePages.tsx","pages/NotFound.tsx","App.tsx","index.tsx"],"names":["RESET_TYPES","SessionHandler","sessionStorage","getItem","username","String","clear","window","location","href","FRONTEND_URL","isOwnFeed","key","Boolean","Number","refresh","setItem","SearchResult","props","abortController","state","isFollowing","icon","faUserPlus","buttonClass","disableButton","getUsername","AbortController","fetch","BACKEND_URL","method","headers","Accept","Authorization","getAuthToken","signal","then","response","ok","json","following","isBlocked","blocked","setState","faBan","faCheck","catch","error","name","console","log","followUser","bind","unfollowUser","updateIcon","event","target","scrollBy","left","type","scrollWidth","behavior","this","body","JSON","stringify","followed","faUserMinus","faExclamationTriangle","setRefreshFeed","unfollowed","mouseOver","abort","className","to","value","readOnly","onMouseOver","scrollInputContent","onMouseOut","onClick","onMouseEnter","onMouseLeave","onMouseDown","e","preventDefault","disabled","React","Component","NotificationBox","message","length","hasDelete","parse","SearchBar","searchDelay","searchQuery","searchResults","displayLoading","updateSearch","replaceAll","clearTimeout","setTimeout","searchFor","query","Accepts","foundUsers","userFound","index","users","hasOwnProperty","text","placeholder","maxLength","onChange","faSearch","transitionDuration","onClickOutside","GoogleFit","handleSubmit","status","data","url","defaultActivityState","sport","sportClass","duration","durationClass","durationIcon","faTimes","durationIconClass","durationMul","distance","distanceClass","distanceIcon","distanceIconClass","distanceMul","averageHeartRate","averageHeartRateClass","averageHeartRateIcon","averageHeartRateIconClass","altitudeDifference","altitudeDifferenceClass","altitudeDifferenceIcon","altitudeDifferenceIconClass","date","Date","defaultNotifyState","notifyMessage","notifyType","defaultStates","defaultState","Object","assign","tryAgainLater","notifyMessages","inputFields","identifier","validValues","hasIcon","inputLabel","inputType","inputPlaceholder","multiplier","NUM_FIELDS","ActivityForm","mandatoryParams","optParams","handleChange","handleReset","submit","document","getElementById","submitButton","prevProps","prevState","snapshot","sports","keys","isNaN","inputParams","inputIndex","valid","isValid","includes","multiplyWith","param","replace","rounded","Math","round","hasAttribute","validateInput","bodyContent","mul","getMaxValidDate","toISOString","slice","allowSubmit","resetState","ACTIVITY","responseJson","handleError","errno","NOTIFICATION","knownError","notifyError","onSubmit","onReset","createSportSelect","createFormFields","push","createInputField","params","min","max","dict","options","createSelectOptions","bitfieldArray","mandatory","toString","split","map","reverse","optional","i","fieldsHTML","dateFormat","showTimeSelect","timeIntervals","timeFormat","maxDate","selected","locale","en","filterTime","time","maxTime","setHours","getHours","setMinutes","getMinutes","inline","returnValue","possibleNaN","removeAttribute","setAttribute","now","ActivityModal","showPopup","active","forms","reset","aria-label","toggleActive","id","requestSubmit","faPlusCircle","Head","src","NewLogo","alt","width","isLoggedIn","faHome","faUser","logOut","faSignInAlt","Footer","Formatter","number","timestamp","formattedTime","diffInM","getTime","diffInH","diffInD","formatDate","fillZeros","getDate","getMonth","getUTCFullYear","formatTime","numberInM","toFixed","durationInS","DurInM","DurInH","kmPerHour","heartRate","Comment","newUser","comment","formatCommentDate","CommentContainer","commentRefreshInterval","comments","numComments","activity","activity_id","refreshComments","setInterval","loadMoreComments","Rowdata","lengthAll","lengthRendered","numFirst","prevComment","prevName","clearInterval","renderComments","activityInfo","title","format","distanceInMeters","format_MeterKilometer","durationInSeconds","format_ActivityDuration","pace","format_pace","format_heartRate","meters","ActivityBox","thumbsRefreshInterval","showThumbsUp","postData","thumbUp","thumbsUpCounter","likes","thumbIsPressed","likedBefore","image_path","formatDateTime","addedAt","ownFeed","faThumbsUp","activityData","ActivityTable","values","forEach","k","renderTableHeaders","renderTableContents","ActivityComments","commentContainerChild","showComments","commentText","handleCommentSubmit","createRef","current","style","border","backgroundColor","faAngleUp","faAngleDown","ref","onKeyUp","keyCode","Feed","refreshInterval","loaded","hasMore","refreshAnimation","getRefreshFeed","getFeed","mode","get_url","activities","concat","faSync","dataLength","next","loader","endMessage","scrollThreshold","scrollableTarget","FeedContainer","switch","feed","htmlFor","switchFeed","initialState","startDate","endDate","activityEvents","FullCalendar","calendar","action","initCalendar","getEvents","destroy","canvas","Calendar","initialView","firstDay","dayMaxEvents","timeZone","headerToolbar","center","right","eventTimeFormat","hour","minute","hour12","slotLabelFormat","defaultAllDay","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","contentHeight","selectable","select","info","create","eventDidMount","element","deleteButton","createElement","onclick","removeEvent","el","append","render","startStr","endStr","start","end","setEvents","item","moment","startedAt","add","groupId","color","addEventSource","removeAllEventSources","getActivity","accept","remove","handleOnChange","createEvent","colors","labels","types","allCategories","categories","averageCategories","category","fill","array","switchfunc","year","Graphs","charts","fetchSports","getCharts","display","loopOverData","chart","param_sport","sqlfunc","createRequest","URLSearchParams","getDatasets","addElement","buttonNode","chartNode","chartBoxNode","chartBox","maxHeight","button","innerHTML","removeChart","parent","appendChild","addCharts","dataArray","Array","yLab","subtitle","month","amount","splice","Chart","responsive","maintainAspectRatio","scales","x","y","font","size","height","datasets","label","find","getFullYear","setCharts","chartID","getChart","removeElement","chartId","box","parentNode","removeChild","handleOnCheck","items","check","checked","newCategories","renderOptions","handleCategories","data-content","showYearPicker","handleDateOnChange","minDate","configureChart","Homepage","Foot","Login","email","password","errorMessage","pw","emailOrUsername","token","splitToken","decodedJSON","atob","Helmet","PAGE_TITLE","autoFocus","autoComplete","RegexValidator","test","SignUp","firstname","lastname","password1","password2","weight","dateChange","errorType","handleDateChange","pw1","pw2","validateName","validateUsername","validateEmail","validatePassword","dateString","setNotification","isError","LoginContainer","exact","path","component","ProtectedRoute","isAuthorized","AuthenticationFunction","redirect","redirectPath","otherProps","Verify","progress","milliseconds","Promise","resolve","a","Sleep","SuccessfulSignup","ProfileActivityBox","ProfileActivityContainer","getLastActivities","numberOfActivities","OwnProfile","firstnamePlaceholder","lastnamePlaceholder","weightPlaceholder","emailPlaceholder","getDefaultValues","emailMessage","showMonthDropdown","showYearDropdown","FollowingPage","match","relationship","getUserInformation","handleBlockClick","handleFollowClick","history","pathname","hasBlocked","unblocked","toBeBlocked","NotFound","spanText","substr","App","isNotLoggedIn","ReactDOM"],"mappings":"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","file":"static/js/main.1600ca0b.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport en from \"date-fns/locale/en-GB\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport NotificationBox from \"../NotificationBox\";\r\nimport SessionHandler from \"../../utilities/SessionHandler\";\r\nimport GoogleFit from \"../GoogleFit\";\r\n\r\nimport {BACKEND_URL} from \"../../App\";\r\n\r\ninterface Props {\r\n    sports: { [key: string]: number }\r\n}\r\n\r\ninterface State {\r\n    [key: string]: any\r\n}\r\n\r\n// Create default state values\r\nconst defaultActivityState = {\r\n    sport: 0,\r\n    sportClass: \"\",\r\n    duration: 0,\r\n    durationClass: \"\",\r\n    durationIcon: faTimes,\r\n    durationIconClass: \"\",\r\n    durationMul: 60,\r\n    distance: 0,\r\n    distanceClass: \"\",\r\n    distanceIcon: faTimes,\r\n    distanceIconClass: \"\",\r\n    distanceMul: 1,\r\n    averageHeartRate: 0,\r\n    averageHeartRateClass: \"\",\r\n    averageHeartRateIcon: faTimes,\r\n    averageHeartRateIconClass: \"\",\r\n    altitudeDifference: 0,\r\n    altitudeDifferenceClass: \"\",\r\n    altitudeDifferenceIcon: faTimes,\r\n    altitudeDifferenceIconClass: \"\",\r\n    date: new Date()\r\n}\r\n\r\nconst defaultNotifyState = {\r\n    notifyMessage: \"\",\r\n    notifyType: \"\"\r\n}\r\n\r\nconst defaultStates: any[] = [defaultActivityState, defaultNotifyState];\r\nconst defaultState = Object.assign({}, defaultActivityState, defaultNotifyState);\r\n\r\nenum RESET_TYPES {\r\n    ACTIVITY,\r\n    NOTIFICATION\r\n}\r\n\r\n// Create error messages\r\nconst tryAgainLater = \"Please try again later and contact an administrator.\";\r\nconst notifyMessages: { [ident: string]: [message: string, type: string] } = {\r\n    \"fetchFailed\":\r\n        [\"No sports found!<br />\" + tryAgainLater, \"is-danger\"],\r\n    \"success\":\r\n        [\"Your activity was saved successfully \", \"is-success\"],\r\n    \"error\":\r\n        [\"Something went wrong!<br />\" + tryAgainLater, \"is-danger\"],\r\n    \"unknownUser\":\r\n        [\"Your username wasn't found!<br />Please log-in or contact an administrator if you believe this is an error.\", \"is-danger\"]\r\n}\r\n\r\ninterface selectOptions {\r\n    [key: string]: [value: number, text: string]\r\n}\r\n\r\ninterface inputConfig {\r\n    identifier: string,\r\n    validValues: [min: any, max: any],\r\n    hasIcon: boolean,\r\n    inputLabel?: string,\r\n    inputType?: string,\r\n    inputPlaceholder?: string,\r\n    multiplier?: selectOptions\r\n}\r\n\r\n// Configure every possible sport param\r\nconst inputFields: inputConfig[] = [\r\n    {\r\n        identifier: \"distance\",\r\n        validValues: [0, 40075000], // -> earth circumference\r\n        hasIcon: true,\r\n        inputLabel: \"Distance\",\r\n        inputType: \"number\",\r\n        inputPlaceholder: \"Please enter the covered distance\",\r\n        multiplier: {\r\n            \"dist_m\": [1, \"m\"],\r\n            \"dist_km\": [1000, \"km\"]\r\n        }\r\n    },\r\n    {\r\n        identifier: \"duration\",\r\n        validValues: [0, 604800], // Max 1 week -> 604800 seconds\r\n        hasIcon: true,\r\n        inputLabel: \"Duration\",\r\n        inputType: \"number\",\r\n        inputPlaceholder: \"Please enter the duration of the activity\",\r\n        multiplier: {\r\n            \"dur_s\": [1, \"s\"],\r\n            \"dur_m\": [60, \"m\"],\r\n            \"dur_h\": [3600, \"h\"]\r\n        }\r\n    },\r\n    {\r\n        identifier: \"pace\",\r\n        validValues: [0, null],\r\n        hasIcon: false\r\n    },\r\n    {\r\n        identifier: \"averageHeartRate\",\r\n        validValues: [25, 250],\r\n        hasIcon: true,\r\n        inputLabel: \"Heart Rate\",\r\n        inputType: \"number\",\r\n        inputPlaceholder: \"Please insert your average heart rate\"\r\n    },\r\n    {\r\n        identifier: \"altitudeDifference\",\r\n        validValues: [0, 40075000], // -> earth circumference\r\n        hasIcon: true,\r\n        inputLabel: \"Altitude Difference\",\r\n        inputType: \"number\",\r\n        inputPlaceholder: \"Please enter the altitude difference of the activity\",\r\n        multiplier: {\r\n            \"alt_m\": [1, \"m\"],\r\n            \"alt_km\": [1000, \"km\"]\r\n        }\r\n    },\r\n    /*\r\n     * !! IT'S IMPORTANT TO LEAVE SPORTS AS THE LAST ENTRY IN THIS LIST !!\r\n     */\r\n    {\r\n        identifier: \"sport\",\r\n        validValues: [0, null],\r\n        hasIcon: false\r\n    }\r\n];\r\nconst NUM_FIELDS = inputFields.length - 1;\r\n\r\nexport default class ActivityForm extends Component<Props, State> {\r\n    private readonly abortController: AbortController;\r\n    mandatoryParams: boolean[] = [];\r\n    optParams: boolean[] = [];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        // Use Object.assign to copy the defaultState and prevent changes to default values\r\n        this.state = Object.assign({}, defaultState);\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        // bind 'this' to event handlers\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // Find submit button of the ActivityModal\r\n        let submit = document.getElementById(\"submit-activity\");\r\n        if (submit) {\r\n            this.setState({submitButton: submit});\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.abortController.abort()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<State>, snapshot?: any) {\r\n        // Check for prop changes\r\n        if (prevProps.sports !== this.props.sports) {\r\n            // Display warning if sports couldn't be fetched\r\n            if (Object.keys(this.props.sports).length === 0) {\r\n                this.setState({\r\n                    notifyMessage: notifyMessages[\"fetchFailed\"][0],\r\n                    notifyType: notifyMessages[\"fetchFailed\"][1]\r\n                });\r\n            }\r\n        }\r\n\r\n        // Check for state changes\r\n        if (prevState.sport !== this.state.sports) {\r\n            // Reset params if sport was deselected\r\n            if (!isNaN(this.state.sports)) {\r\n                this.mandatoryParams = [];\r\n                this.optParams = [];\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange(event: any) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        // ignore negative values\r\n        if (value < 0) {\r\n            return;\r\n        }\r\n\r\n        // Retrieve predefined params\r\n        let inputParams = null;\r\n        for (let index in inputFields) {\r\n            let inputIndex = inputFields[index];\r\n            if (inputIndex.identifier === name) {\r\n                inputParams = inputIndex;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Check whether the property has inputParams\r\n        if (inputParams) {\r\n            let valid = this.isValid(value, inputParams.validValues, name === \"sport\", this.state[name + \"Mul\"]);\r\n            let icon = inputParams.hasIcon;\r\n\r\n            // Set CSS class depending on validity\r\n            this.setState({[name + \"Class\"]: (valid ? \"is-success\" : \"\")});\r\n\r\n            if (icon) {\r\n                // Set icon depending on validity\r\n                this.setState({\r\n                    [name + \"Icon\"]: (valid ? faCheck : faTimes),\r\n                    [name + \"IconClass\"]: (valid ? \"has-text-success\" : \"\")\r\n                });\r\n            }\r\n        } else {\r\n            // Check if a multiplier was changed\r\n            if (name.includes(\"Mul\")) {\r\n                // Calculate property depending on multiplier\r\n                let multiplyWith = this.state[name] / value;\r\n                let param = name.replace(\"Mul\", \"\");\r\n\r\n                // Round to the last 2 decimal places\r\n                let rounded = Math.round((this.state[param] * multiplyWith) * 100) / 100;\r\n\r\n                // Catch possible NaNs\r\n                this.setState({[param]: isNaN(rounded) ? 0 : rounded})\r\n            }\r\n        }\r\n\r\n        // Update state\r\n        isNaN(value) ?\r\n            this.setState({[name]: value === \"NaN\" ? 0 : value}) :\r\n            this.setState({[name]: Number(value)});\r\n    }\r\n\r\n    handleSubmit(event: any) {\r\n        // Prevent page refresh\r\n        event.preventDefault();\r\n\r\n        // Prevent false submits\r\n        if (this.state.submitButton.hasAttribute(\"disabled\")) return;\r\n\r\n        // Check whether all must-params are valid\r\n        if (this.validateInput(true)) {\r\n            // Create POST-request body content\r\n            let bodyContent: { [key: string]: any } = {\r\n                \"sport\": this.state.sport\r\n            };\r\n\r\n            // Append must and valid optional params\r\n            for (let index in this.mandatoryParams) {\r\n                let inputParams = inputFields[index];\r\n                let value = this.state[inputParams.identifier];\r\n                let mul = this.state[inputParams.identifier + \"Mul\"];\r\n\r\n                if (this.mandatoryParams[index] || (this.optParams[index] && this.isValid(value, inputParams.validValues, false, mul))) {\r\n                    // Apply multiplier\r\n                    if (mul > 1) {\r\n                        value *= mul;\r\n                    }\r\n\r\n                    bodyContent[inputParams.identifier] = value;\r\n                }\r\n            }\r\n\r\n            // Calculate pace\r\n            if (bodyContent[\"distance\"] > 0 && bodyContent[\"duration\"] > 0) {\r\n                // Distance is in m, duration in s\r\n                // Pace will be saved in km/h\r\n                bodyContent[\"pace\"] = bodyContent[\"distance\"] / bodyContent[\"duration\"] * 3.6;\r\n            }\r\n\r\n            // Check if picked date is valid, else use max valid date\r\n            bodyContent[\"startedAt\"] = (\r\n                this.state.date < this.getMaxValidDate() ?\r\n                    this.state.date :\r\n                    this.getMaxValidDate()\r\n            ).toISOString().slice(0, 19).replace(\"T\", \" \");\r\n\r\n            // Send post request\r\n            fetch(BACKEND_URL + \"activity/add\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: SessionHandler.getAuthToken()\r\n                },\r\n                body: JSON.stringify(bodyContent),\r\n                signal: this.abortController.signal\r\n            }).then((response) => {\r\n                if (response.ok) {\r\n                    this.setState({\r\n                        notifyMessage: notifyMessages[\"success\"][0],\r\n                        notifyType: notifyMessages[\"success\"][1]\r\n                    });\r\n\r\n                    // Trigger feed refresh\r\n                    SessionHandler.setRefreshFeed(true);\r\n\r\n                    // Disable submit button and reset form\r\n                    this.allowSubmit(false);\r\n                    this.resetState(RESET_TYPES.ACTIVITY);\r\n                } else {\r\n                    // Get response as text\r\n                    response.text().then((response) => {\r\n                        try {\r\n                            // Try parsing received string to json\r\n                            let responseJson = JSON.parse(response);\r\n                            this.handleError(responseJson.message, responseJson.errno === 1)\r\n                        } catch (e) {\r\n                            this.handleError(\"Invalid JSON response\");\r\n                        }\r\n                    });\r\n                }\r\n            }).catch((error: any) => {\r\n                // Don't react to 'AbortError's\r\n                if (error.name !== \"AbortError\") {\r\n                    this.handleError(error)\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    handleReset(event: any) {\r\n        event.preventDefault();\r\n\r\n        // Reset form and NotificationBox\r\n        this.resetState(RESET_TYPES.NOTIFICATION);\r\n        this.resetState(RESET_TYPES.ACTIVITY);\r\n        this.allowSubmit(false);\r\n    }\r\n\r\n    handleError(error: any, knownError?: boolean) {\r\n        console.log(\"Error after adding activity to database: \", error);\r\n        this.notifyError(knownError ? \"unknownUser\" : \"error\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} onReset={this.handleReset}>\r\n                <NotificationBox message={this.state.notifyMessage} type={this.state.notifyType} hasDelete={false}/>\r\n\r\n                <label className=\"label\">Sport</label>\r\n                <div className={`select is-fullwidth ${this.state.sportClass}`}>\r\n                    <select name=\"sport\" onChange={this.handleChange} value={this.state.sport}>\r\n                        {\r\n                            // Create sport select if sport fetch was successful\r\n                            this.state.notifyMessage !== notifyMessages[\"fetchFailed\"][0] ?\r\n                                this.createSportSelect() :\r\n                                <option key=\"-1\" value=\"-1\">Something went wrong!</option>\r\n                        }\r\n                    </select>\r\n                </div>\r\n\r\n                {\r\n                    // Create input forms or display GoogleFit-import\r\n                    this.state.sportClass === \"is-success\" ?\r\n                        this.createFormFields() :\r\n                        <>\r\n                            <div className=\"divider\">Import</div>\r\n                            <GoogleFit/>\r\n                        </>\r\n                }\r\n            </form>\r\n        );\r\n    }\r\n\r\n    // Create a select option for every sport\r\n    createSportSelect() {\r\n        let sports = [];\r\n        sports.push(<option value=\"0\" key=\"0\"/>);\r\n\r\n        for (let key in this.props.sports) {\r\n            sports.push(<option value={key} key={key}>{key}</option>);\r\n        }\r\n\r\n        return sports;\r\n    }\r\n\r\n    createFormFields() {\r\n        // Create HTML Fields template\r\n        // Executed on the client -> no performance problem for now\r\n        let createInputField = (params: inputConfig) => {\r\n            function createSelectOptions(dict: selectOptions) {\r\n                let options = [];\r\n                for (let key in dict) {\r\n                    if (dict.hasOwnProperty(key)) {\r\n                        options.push(<option value={dict[key][0]} key={key}>{dict[key][1]}</option>);\r\n                    }\r\n                }\r\n\r\n                return options;\r\n            }\r\n\r\n            let identifier = params.identifier;\r\n\r\n            // Pace doesn't have an input field\r\n            if (identifier !== \"pace\") {\r\n                return (\r\n                    // Conditional rendering depending on multiplier\r\n                    params.multiplier ?\r\n                        <div key={\"inputField_\" + identifier} className=\"field\">\r\n                            <label className=\"label\">{params.inputLabel}</label>\r\n                            <div className=\"field has-addons\">\r\n                                <div className=\"control has-icons-right is-expanded\">\r\n                                    <input\r\n                                        className={`input ${this.state[identifier + \"Class\"]}`}\r\n                                        type={params.inputType}\r\n                                        name={identifier}\r\n                                        placeholder={params.inputPlaceholder}\r\n                                        value={Number(this.state[identifier]) === 0 ? \"\" : this.state[identifier]}\r\n                                        min={params.validValues[0]}\r\n                                        max={params.validValues[1]}\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                    <span className={`icon is-right ${this.state[identifier + \"IconClass\"]}`}>\r\n                                        <FontAwesomeIcon icon={this.state[identifier + \"Icon\"]}/>\r\n                                    </span>\r\n                                </div>\r\n                                <div className=\"control\">\r\n                                    <div className={`select ${this.state[identifier + \"Class\"]} is-fullwidth`}>\r\n                                        <select\r\n                                            name={identifier + \"Mul\"}\r\n                                            value={this.state[identifier + \"Mul\"]}\r\n                                            onChange={this.handleChange}\r\n                                        >\r\n                                            {createSelectOptions(params.multiplier)}\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        :\r\n                        <div key={\"inputField_\" + identifier} className=\"field\">\r\n                            <label className=\"label\">{params.inputLabel}</label>\r\n                            <div className=\"field\">\r\n                                <div className=\"control has-icons-right\">\r\n                                    <input\r\n                                        className={`input ${this.state[identifier + \"Class\"]}`}\r\n                                        type={params.inputType}\r\n                                        name={identifier}\r\n                                        placeholder={params.inputPlaceholder}\r\n                                        value={Number(this.state[identifier]) === 0 ? \"\" : this.state[identifier]}\r\n                                        min={params.validValues[0]}\r\n                                        max={params.validValues[1]}\r\n                                        onChange={this.handleChange}\r\n                                    />\r\n                                    <span className={`icon is-right ${this.state[identifier + \"IconClass\"]}`}>\r\n                                        <FontAwesomeIcon icon={this.state[identifier + \"Icon\"]}/>\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                );\r\n            } else {\r\n                return (\r\n                    <div key={\"input_empty_div\"}/>\r\n                );\r\n            }\r\n        };\r\n\r\n        // Only create elements if a valid sport is selected\r\n        if (this.state.sportClass === \"is-success\") {\r\n            // Get bitfields\r\n            let bitfieldArray: any = this.props.sports[this.state.sport];\r\n\r\n            // split them into their bitwise representation\r\n            // map the strings representing numbers to booleans\r\n            // reverse to fill zeros in the beginning\r\n            let mandatory: boolean[] = bitfieldArray[1].toString(2)\r\n                .split(\"\").map((value: string) => Boolean(Number(value)))\r\n                .reverse();\r\n            let optional: boolean[] = bitfieldArray[0].toString(2)\r\n                .split(\"\").map((value: string) => Boolean(Number(value)))\r\n                .reverse();\r\n\r\n            // Fill missing zeros\r\n            for (let i = 0; i < NUM_FIELDS - mandatory.length; i++) {\r\n                mandatory.push(false);\r\n            }\r\n            for (let i = 0; i < NUM_FIELDS - optional.length; i++) {\r\n                optional.push(false);\r\n            }\r\n\r\n            // reverse back\r\n            mandatory = mandatory.reverse();\r\n            optional = optional.reverse();\r\n\r\n            // Create input fields depending on specified params\r\n            let fieldsHTML = [<div className=\"divider\" key={\"input_divider_man\"}>Mandatory</div>];\r\n            for (let index in mandatory) {\r\n                if (mandatory[index]) {\r\n                    fieldsHTML.push(createInputField(inputFields[index]));\r\n\r\n                    // Remove param from optional to prevent double input\r\n                    if (optional[index]) {\r\n                        optional[index] = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Only display optional params if there are any\r\n            fieldsHTML.push(<div className=\"divider\" key={\"input_divider_opt\"}>Optional</div>);\r\n            for (let index in optional) {\r\n                if (optional[index]) {\r\n                    fieldsHTML.push(createInputField(inputFields[index]));\r\n                }\r\n            }\r\n\r\n            // Create date picker\r\n            fieldsHTML.push(<div key={\"inputField_date\"}>\r\n                <label className=\"label\">Date and Time</label>\r\n                <DatePicker\r\n                    dateFormat=\"dd.MM.yyyy HH:mm\"\r\n                    showTimeSelect\r\n                    timeIntervals={15}\r\n                    timeFormat=\"HH:mm\"\r\n                    maxDate={this.getMaxValidDate()}\r\n                    selected={this.state.date}\r\n                    locale={en}\r\n                    onChange={(date: Date) => this.setState({date: date})}\r\n                    filterTime={(time: Date) => {\r\n                        let maxTime = this.getMaxValidDate();\r\n                        let selected = new Date(this.state.date);\r\n                        selected.setHours(time.getHours());\r\n                        selected.setMinutes(time.getMinutes());\r\n\r\n                        return selected < maxTime;\r\n                    }}\r\n                    inline\r\n                />\r\n            </div>);\r\n\r\n            // Update global params\r\n            this.mandatoryParams = mandatory;\r\n            this.optParams = optional;\r\n\r\n            // Validate Fields\r\n            this.validateInput();\r\n\r\n            return fieldsHTML;\r\n        }\r\n        // Display an information for the user\r\n        return <p className=\"tag is-info mt-4\" key={\"inputField_sportInfo\"}>Please select a sport</p>;\r\n    }\r\n\r\n    validateInput(returnValue?: boolean) {\r\n        // Check whether a sport was selected\r\n        let valid = this.isValid(this.state.sport, inputFields[NUM_FIELDS].validValues, true);\r\n\r\n        // Check whether the value is in the valid range for every mandatory param\r\n        for (let index in this.mandatoryParams) {\r\n            if (this.mandatoryParams[index]) {\r\n                let inputParams = inputFields[index];\r\n                let identifier = inputParams.identifier;\r\n                valid = valid && this.isValid(this.state[identifier], inputParams.validValues, identifier === \"pace\", this.state[identifier + \"Mul\"]);\r\n            }\r\n        }\r\n\r\n        // En-/disable submit button if existing\r\n        if (this.state.submitButton) {\r\n            this.allowSubmit(valid);\r\n        }\r\n\r\n        // Return if needed\r\n        if (returnValue) {\r\n            return valid;\r\n        }\r\n    }\r\n\r\n    isValid(value: number, validValues: any[], possibleNaN: boolean = false, multiplier: number | undefined | null = 1) {\r\n        let min = validValues[0];\r\n        let max = validValues[1];\r\n        value = Number(value);\r\n\r\n        // Check whether the value is in range of the params or is NaN (sports)\r\n        if (isNaN(value)) {\r\n            return possibleNaN;\r\n        } else {\r\n            if (multiplier && multiplier > 0) {\r\n                value *= multiplier;\r\n            }\r\n            return (min < value && (max ? value < max : true));\r\n        }\r\n    }\r\n\r\n    allowSubmit(state: boolean) {\r\n        state ?\r\n            this.state.submitButton.removeAttribute(\"disabled\") :\r\n            this.state.submitButton.setAttribute(\"disabled\", \"\");\r\n    }\r\n\r\n    resetState(type: RESET_TYPES) {\r\n        this.setState(defaultStates[type]);\r\n    }\r\n\r\n    // Get the maximum valid date depending on the duration of the activity\r\n    getMaxValidDate() {\r\n        return new Date(Date.now() - this.state.duration * this.state.durationMul * 1000);\r\n    }\r\n\r\n    notifyError(type: \"error\" | \"unknownUser\") {\r\n        this.setState({\r\n            notifyMessage: notifyMessages[type][0],\r\n            notifyType: notifyMessages[type][1]\r\n        });\r\n    }\r\n}","import {FRONTEND_URL} from \"../App\";\r\n\r\nexport default class SessionHandler {\r\n    static getAuthToken() {\r\n        return \"Bearer \" + sessionStorage.getItem(\"AccessToken\");\r\n    }\r\n\r\n    static isLoggedIn() {\r\n        return sessionStorage.getItem(\"AccessToken\") !== null;\r\n    }\r\n\r\n    static isNotLoggedIn() {\r\n        return sessionStorage.getItem(\"AccessToken\") === null;\r\n    }\r\n\r\n    static getUser() {\r\n        return ({\r\n            username: sessionStorage.getItem(\"username\")\r\n        });\r\n    }\r\n\r\n    static getUsername() {\r\n        return sessionStorage.getItem(\"username\") ? String(sessionStorage.getItem(\"username\")) : \"unknown user\";\r\n    }\r\n\r\n    static logOut() {\r\n        sessionStorage.clear();\r\n        // Redirect\r\n        window.location.href = FRONTEND_URL;\r\n    }\r\n\r\n    static getRefreshFeed(isOwnFeed: boolean = true) {\r\n        let key = \"refresh\" + (isOwnFeed ? \"Own\" : \"Friends\") + \"Feed\";\r\n        return Boolean(Number(sessionStorage.getItem(key)));\r\n    }\r\n\r\n    static setRefreshFeed(refresh: boolean, isOwnFeed: boolean = true) {\r\n        let key = \"refresh\" + (isOwnFeed ? \"Own\" : \"Friends\") + \"Feed\";\r\n        sessionStorage.setItem(key, String(Number(refresh)));\r\n    }\r\n}\r\n","import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {faCheck, faBan, faUserPlus, faUserMinus, faExclamationTriangle} from \"@fortawesome/free-solid-svg-icons\";\r\nimport SessionHandler from \"../../utilities/SessionHandler\";\r\nimport {BACKEND_URL} from \"../../App\";\r\nimport {IconDefinition} from \"@fortawesome/free-brands-svg-icons\";\r\n\r\ninterface Props {\r\n    username: string\r\n}\r\n\r\ninterface State {\r\n    isFollowing: boolean\r\n    icon: IconDefinition,\r\n    buttonClass: string\r\n    disableButton: boolean\r\n}\r\n\r\nexport default class SearchResult extends React.Component<Props, State> {\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isFollowing: false,\r\n            icon: faUserPlus,\r\n            buttonClass: \"is-success\",\r\n            disableButton: SessionHandler.getUsername() === this.props.username\r\n        }\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        // Check whether the user is already following or blocked\r\n        fetch(BACKEND_URL + \"users/getRelationship?user=\" + this.props.username, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                // Process response\r\n                response.json().then((response) => {\r\n                    let isFollowing: boolean = response.following;\r\n                    let isBlocked: boolean = response.blocked;\r\n\r\n                    // Set icon and class depending on relationship\r\n                    this.setState({\r\n                        isFollowing: isFollowing,\r\n                        icon: (isBlocked ? faBan : (isFollowing ? faCheck : faUserPlus)),\r\n                        buttonClass: (isBlocked ? \"is-danger\" : this.state.buttonClass),\r\n                        disableButton: this.state.disableButton || isBlocked,\r\n                    });\r\n                });\r\n            }\r\n        }).catch((error: any) => {\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(\"Fetch failed:\", error);\r\n            }\r\n        });\r\n\r\n        this.followUser = this.followUser.bind(this);\r\n        this.unfollowUser = this.unfollowUser.bind(this);\r\n        this.updateIcon = this.updateIcon.bind(this);\r\n    }\r\n\r\n    scrollInputContent(event: any) {\r\n        const target = event.target;\r\n\r\n        // Scroll username if its larger than the displayable content\r\n        target.scrollBy({\r\n            left: (event.type === \"mouseout\" ? -target.scrollWidth : target.scrollWidth),\r\n            behavior: \"smooth\"\r\n        });\r\n    }\r\n\r\n    followUser(event: any) {\r\n        // Only follow if button is not disabled\r\n        if (!this.state.disableButton) {\r\n            fetch(BACKEND_URL + \"users/follow\", {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: SessionHandler.getAuthToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    followed: this.props.username\r\n                }),\r\n                signal: this.abortController.signal\r\n            }).then((response) => {\r\n                this.setState({\r\n                    isFollowing: response.ok,\r\n                    icon: response.ok ? faUserMinus : faExclamationTriangle,\r\n                    buttonClass: \"is-danger\"\r\n                });\r\n\r\n                // Trigger friends feed response\r\n                if (response.ok) {\r\n                    SessionHandler.setRefreshFeed(true, false);\r\n                }\r\n            }).catch((error: any) => {\r\n                if (error.name !== \"AbortError\") {\r\n                    console.log(\"Fetch failed:\", error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    unfollowUser(event: any) {\r\n        if (!this.state.disableButton) {\r\n            fetch(BACKEND_URL + \"users/unfollow\", {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    Accept: \"application/json\",\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: SessionHandler.getAuthToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    unfollowed: this.props.username\r\n                }),\r\n                signal: this.abortController.signal\r\n            }).then((response) => {\r\n                this.setState({\r\n                    isFollowing: !response.ok,\r\n                    icon: response.ok ? faUserPlus : faExclamationTriangle,\r\n                    buttonClass: response.ok ? \"is-success\" : \"is-danger\"\r\n                });\r\n\r\n                // Trigger friends feed response\r\n                if (response.ok) {\r\n                    SessionHandler.setRefreshFeed(true, false);\r\n                }\r\n            }).catch((error: any) => {\r\n                if (error.name !== \"AbortError\") {\r\n                    console.log(\"Fetch failed:\", error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    updateIcon(event: any) {\r\n        if (!this.state.disableButton) {\r\n            // Display unfollow icon if user is following and mouse is hovering over the button\r\n            let following: boolean = this.state.isFollowing;\r\n            let mouseOver: boolean = event.type === \"mouseenter\";\r\n\r\n            this.setState({\r\n                icon: following ? (mouseOver ? faUserMinus : faCheck) : this.state.icon,\r\n                buttonClass: (following ? (mouseOver ? \"is-danger\" : \"is-success\") : this.state.buttonClass)\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Abort running requests\r\n        this.abortController.abort();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dropdown-item\">\r\n                <div className=\"field has-addons\">\r\n                    <div className=\"control\">\r\n                        <Link to={\"/users/\" + this.props.username}>\r\n                            <input\r\n                                className=\"input is-static searchResult\"\r\n                                type=\"text\"\r\n                                value={this.props.username}\r\n                                readOnly={true}\r\n                                onMouseOver={this.scrollInputContent}\r\n                                onMouseOut={this.scrollInputContent}\r\n                            />\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"control\">\r\n                        <button\r\n                            className={`button ${this.state.buttonClass} is-inverted`}\r\n                            onClick={this.state.isFollowing ? this.unfollowUser : this.followUser}\r\n                            onMouseEnter={this.updateIcon}\r\n                            onMouseLeave={this.updateIcon}\r\n                            onMouseDown={(e) => e.preventDefault()}\r\n                            disabled={this.state.disableButton}\r\n                        >\r\n                            <span className=\"icon is-small\">\r\n                                <FontAwesomeIcon icon={this.state.icon}/>\r\n                            </span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport parse from 'html-react-parser';\r\n\r\ninterface Props {\r\n    message: string\r\n    type: string\r\n    hasDelete: boolean\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\n// TODO: Add delete button functionality\r\nexport default class NotificationBox extends Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n        // Displays a notification to inform the user of something\r\n        if (this.props.message.length === 0) {\r\n            return \"\";\r\n        } else {\r\n            return (\r\n                <div className={`notification ${this.props.type}`}>\r\n                    {(this.props.hasDelete ? <button type=\"button\" className=\"delete\"/> : \"\")}\r\n                    {parse(this.props.message)}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\";\r\nimport onClickOutside from \"react-onclickoutside\";\r\nimport FadeIn from 'react-fade-in';\r\n\r\nimport SearchResult from \"./SearchResult\";\r\nimport {BACKEND_URL} from \"../../App\";\r\nimport SessionHandler from \"../../utilities/SessionHandler\";\r\nimport NotificationBox from \"../NotificationBox\";\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n    searchQuery: string\r\n    searchResults: JSX.Element;\r\n    displayLoading: boolean\r\n}\r\n\r\nclass SearchBar extends React.Component<Props, State> {\r\n    private readonly abortController: AbortController;\r\n    private searchDelay: any;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            searchQuery: \"\",\r\n            searchResults: <></>,\r\n            displayLoading: false\r\n        }\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        this.updateSearch = this.updateSearch.bind(this);\r\n    }\r\n\r\n    updateSearch(event: any) {\r\n        let value: string = String(event.target.value).replaceAll(\" \", \"\");\r\n\r\n        this.setState({\r\n                searchQuery: value,\r\n                searchResults: <></>,\r\n                displayLoading: true\r\n            }, () => {\r\n                // Only start searching for the term if it hasn't changed for a second and is not empty\r\n                clearTimeout(this.searchDelay);\r\n\r\n                if (value !== \"\") {\r\n                    this.searchDelay = setTimeout(() => {\r\n                        this.searchFor(value);\r\n                    }, 1000);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    searchFor(query: string) {\r\n        fetch(BACKEND_URL + \"users/search?query=\" + query, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accepts: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                response.json().then((response) => {\r\n                    // Display a NotificationBox if no users where found\r\n                    let foundUsers: any = <NotificationBox\r\n                        message={`User '${query}' could not be found!`}\r\n                        type={\"is-danger is-light mx-2\"}\r\n                        hasDelete={false}\r\n                    />\r\n\r\n                    if (response.userFound) {\r\n                        foundUsers = JSON.parse(response.users);\r\n\r\n                        // Create a SearchResult for every found user\r\n                        for (let index in foundUsers) {\r\n                            if (foundUsers.hasOwnProperty(index)) {\r\n                                foundUsers[index] =\r\n                                    <SearchResult username={foundUsers[index]} key={\"result_\" + foundUsers[index]}/>\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this.setState({\r\n                        displayLoading: false,\r\n                        searchResults: foundUsers\r\n                    });\r\n                });\r\n            } else {\r\n                // Log response\r\n                response.text().then((response) => console.log(response));\r\n            }\r\n        }).catch((error: any) => {\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(\"Fetch failed:\", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Remove running timeout and abort running requests to prevent a memory leak\r\n        clearTimeout(this.searchDelay);\r\n\r\n        this.abortController.abort();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={`dropdown ${this.state.searchQuery !== \"\" ? \"is-active\" : \"\"}`}>\r\n                <div className=\"dropdown-trigger\">\r\n                    <div className=\"field\">\r\n                        <div className=\"control is-expanded has-icons-right\">\r\n                            <input\r\n                                className=\"input is-primary\"\r\n                                type=\"search\"\r\n                                value={this.state.searchQuery}\r\n                                placeholder=\"Search for other users\"\r\n                                maxLength={30}\r\n                                onChange={this.updateSearch}/>\r\n                            <span className=\"icon is-small is-right\">\r\n                                <FontAwesomeIcon icon={faSearch}/>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"dropdown-menu\">\r\n                    <div className=\"dropdown-content\">\r\n                        {this.state.displayLoading ?\r\n                            <div className=\"dropdown-item\">\r\n                                <div className=\"field has-addons\">\r\n                                    <div className=\"control\">\r\n                                        <input className=\"input is-static\"\r\n                                               type=\"text\"\r\n                                               placeholder={\"Searching...\"}\r\n                                               readOnly={true}/>\r\n                                    </div>\r\n                                    <div className=\"control\">\r\n                                        <button className=\"button is-loading is-white\" disabled={true}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <FadeIn transitionDuration={300}>\r\n                                {this.state.searchResults}\r\n                            </FadeIn>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleClickOutside() {\r\n        // Reset searchQuery on click outside component\r\n        if (this.state.searchQuery !== \"\") {\r\n            this.setState({\r\n                searchQuery: \"\",\r\n                searchResults: <></>,\r\n                displayLoading: false\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default onClickOutside(SearchBar);","import React, {Component} from \"react\";\r\nimport SessionHandler from \"../utilities/SessionHandler\";\r\nimport {BACKEND_URL} from \"../App\";\r\n\r\n//google fit import button\r\nexport default class GoogleFit extends Component<{}> {\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event: React.MouseEvent<HTMLButtonElement>) {\r\n        event.preventDefault();\r\n        //get url to redirect\r\n        fetch(BACKEND_URL + 'googlefit/getURLTing', {\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.status !== 200) {\r\n                console.log('Looks like there was a problem. Status Code: ' +\r\n                    response.status);\r\n                return;\r\n            }\r\n            // Examine the text in the response\r\n            response.json().then((data) => {\r\n                window.location = data.url;//redirect to generated google url with all permissions tokens etc.\r\n            });\r\n        }).catch((error: any) => {\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(\"Fetch failed:\", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.abortController.abort();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <button type='submit' className='button is-black is-outlined' onClick={this.handleSubmit}>\r\n                    Import Data from GoogleFit\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import {faPlusCircle, faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport ActivityForm from \"./ActivityForm\";\r\nimport {BACKEND_URL} from \"../../App\";\r\nimport SessionHandler from \"../../utilities/SessionHandler\";\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n    showPopup: boolean\r\n    active: boolean\r\n    sports: { [name: string]: number }\r\n}\r\n\r\nexport default class ActivityModal extends React.Component<Props, State> {\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            showPopup: false,\r\n            active: false,\r\n            sports: {}\r\n        };\r\n\r\n        this.abortController = new AbortController();\r\n    }\r\n\r\n    componentDidMount() {\r\n        let submit = document.getElementById(\"submit-activity\");\r\n        if (submit) {\r\n            submit.setAttribute(\"disabled\", \"\");\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.abortController.abort();\r\n    }\r\n\r\n    toggleActive() {\r\n        let active = !this.state.active;\r\n        this.setState({active: active});\r\n\r\n        if (active) {\r\n            // Fetch sports from database\r\n            fetch(BACKEND_URL + \"sports/fetch\", {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Accepts: \"application/json\",\r\n                    Authorization: SessionHandler.getAuthToken()\r\n                },\r\n                signal: this.abortController.signal\r\n            }).then((response) => {\r\n                if (response.ok) {\r\n                    return response.json().then((response) => {\r\n                        this.setState({sports: JSON.parse(response.body)});\r\n                    });\r\n                } else {\r\n                    return response.json().then((response) => {\r\n                        console.log(\"Sport Fetch failed:\", response);\r\n                        this.setState({sports: {}});\r\n                    });\r\n                }\r\n            }).catch((error: any) => {\r\n                if (error.name !== \"AbortError\") {\r\n                    console.log(\"Fetch failed:\", error);\r\n                }\r\n            });\r\n        } else {\r\n            // Reset input form on close\r\n            document.forms[0].reset()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section className='main'>\r\n                <div className={`modal ${this.state.active ? \"is-active\" : \"\"}`}>\r\n                    <div className=\"modal-background\"/>\r\n                    <div className=\"modal-card\">\r\n                        <header className=\"modal-card-head\">\r\n                            <p className=\"modal-card-title\">Add Activity</p>\r\n                            <button className=\"delete\" aria-label=\"close\" onClick={() => this.toggleActive()}/>\r\n                        </header>\r\n\r\n                        <section className=\"modal-card-body\">\r\n                            <div className=\"content\">\r\n                                <ActivityForm sports={this.state.sports}/>\r\n                            </div>\r\n                        </section>\r\n\r\n                        <footer className=\"modal-card-foot\">\r\n                            <button className=\"button is-success\" id=\"submit-activity\"\r\n                                    onClick={() => document.forms[0].requestSubmit()}>\r\n                                <span className=\"icon is-small\">\r\n                                    <FontAwesomeIcon icon={faCheck}/>\r\n                                </span>\r\n                                <span>Save</span>\r\n                            </button>\r\n                            <button className=\"button is-danger is-outlined\" onClick={() => this.toggleActive()}>\r\n                                <span className=\"icon is-small\">\r\n                                    <FontAwesomeIcon icon={faTimes}/>\r\n                                </span>\r\n                                <span>Cancel</span>\r\n                            </button>\r\n                        </footer>\r\n                    </div>\r\n                </div>\r\n\r\n                <button className=\"button is-primary is-rounded\" onClick={() => this.toggleActive()}>\r\n                    <span className=\"icon\">\r\n                        <FontAwesomeIcon icon={faPlusCircle}/>\r\n                    </span>\r\n                </button>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n  ","export default __webpack_public_path__ + \"static/media/Logo.bc3c7482.png\";","import SearchBar from \"./search/SearchBar\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHome, faSignInAlt, faUser} from \"@fortawesome/free-solid-svg-icons\";\r\nimport ActivityModal from \"./activity/ActivityModal\";\r\nimport {Link} from \"react-router-dom\";\r\nimport SessionHandler from \"../utilities/SessionHandler\";\r\nimport NewLogo from \"../img/Logo.png\";\r\nimport React from \"react\";\r\n\r\n//Head of React app. Used on every page. Integration of Modal to create Activity and Search\r\n\r\nexport const Head = () => (\r\n    <div id=\"header\">\r\n        <nav className=\"navbar p-2 is-dark\">\r\n            <img src={NewLogo} alt=\"Logo\" width={250}/>\r\n            <div className=\"navbar-end\">\r\n                {SessionHandler.isLoggedIn() ?\r\n                    <>\r\n                        <div className=\"navbar-item\">\r\n                            <SearchBar/>\r\n                        </div>\r\n                        <Link className=\"navbar-item\" to=\"/\">\r\n                        <span className=\"icon\">\r\n                            <FontAwesomeIcon icon={faHome}/>\r\n                        </span>\r\n                            <div>Home</div>\r\n                        </Link>\r\n                        <Link className=\"navbar-item\" to=\"/profile\">\r\n                        <span className=\"icon\">\r\n                            <FontAwesomeIcon icon={faUser}/>\r\n                        </span>\r\n                            <div>Profile</div>\r\n                        </Link>\r\n                        <div className=\"navbar-item\">\r\n                            <ActivityModal/>\r\n                        </div>\r\n                        <span className=\"navbar-item\">\r\n                        <Link\r\n                            className=\"button is-primary is-inverted\"\r\n                            to={\"/login\"}\r\n                            onClick={() => SessionHandler.logOut()}>\r\n\r\n                            <span className=\"icon\">\r\n                                <FontAwesomeIcon icon={faSignInAlt}/>\r\n                            </span>\r\n                            <span>Logout</span>\r\n                        </Link>\r\n                    </span>\r\n                    </> :\r\n                    <div className=\"navbar-end\">\r\n                        <div className=\"navbar-item px-1\">\r\n                            <Link className=\"button is-primary\" to={\"/login\"}>Sign in</Link>\r\n                        </div>\r\n                        <div className=\"navbar-item px-1\">\r\n                            <Link className=\"button is-light\" to={\"/sign-up\"}>Sign up</Link>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </nav>\r\n    </div>\r\n);\r\n\r\nexport default Head;\r\n","//Foot of React app. Used on every page\r\n\r\nexport const Footer = () => (\r\n    <footer id=\"footer\" className=\"p-5\">\r\n        <div className=\"content has-text-centered\">\r\n            <p>\r\n                The source code is licensed under the <a href=\"http://opensource.org/licenses/mit-license.php\">MIT</a> License.\r\n                Please contact the admin to receive further information.\r\n                Uses <a href=\"https://icons8.com/\"> Icons8</a> Icons.\r\n            </p>\r\n        </div>\r\n    </footer>\r\n);\r\n\r\nexport default Footer;\r\n","export class Formatter {\r\n    // Fill leading zero on a given number\r\n    static fillZeros(number: number | string) {\r\n        return number < 10 ? \"0\" + number : number;\r\n    }\r\n\r\n    /*\r\n     * Format a date into on of the following\r\n     * - 'Just now': Comment posted less than a minute ago\r\n     * - 'x minute(s) ago': Same for hour(s) and day(s)\r\n     * - 'DD.MM.YYYY': Longer than 2 weeks ago\r\n     */\r\n    static formatCommentDate(timestamp: Date) {\r\n        let formattedTime = \"\";\r\n\r\n        // Calculate difference in minutes\r\n        let diffInM = Math.round((new Date().getTime() - timestamp.getTime()) / 1000 / 60);\r\n\r\n        if (diffInM === 0) {\r\n            return \"Just now\";\r\n        } else if (diffInM < 60) {\r\n            formattedTime = diffInM + \" minute\" + (diffInM === 1 ? \"\" : \"s\");\r\n        } else {\r\n            // Calculate difference in hours\r\n            let diffInH = Math.round(diffInM / 60);\r\n            if (diffInH < 24) {\r\n                formattedTime = diffInH + \" hour\" + (diffInH === 1 ? \"\" : \"s\");\r\n            } else {\r\n                // Calculate difference in days\r\n                let diffInD = Math.round(diffInH / 24);\r\n                if (diffInD < 15) {\r\n                    formattedTime = diffInD + \" day\" + (diffInD === 1 ? \"\" : \"s\");\r\n                } else {\r\n                    // Return date representation\r\n                    return Formatter.formatDate(timestamp);\r\n                }\r\n            }\r\n        }\r\n\r\n        return formattedTime + \" ago\";\r\n    }\r\n\r\n    // Format a date into DD.MM.YYYY\r\n    static formatDate(date: Date) {\r\n        // getMonth is zero-based\r\n        return Formatter.fillZeros(date.getDate()) + \".\" + Formatter.fillZeros(date.getMonth() + 1) + \".\" + date.getUTCFullYear();\r\n    }\r\n\r\n    // Format a date into HH:MM\r\n    static formatTime(date: Date) {\r\n        return Formatter.fillZeros(date.getHours()) + \":\" + Formatter.fillZeros(date.getMinutes());\r\n    }\r\n\r\n    // Format a date into DD.MM.YYYY, HH:MM\r\n    static formatDateTime(date: Date) {\r\n        return Formatter.formatDate(date) + \", \" + Formatter.formatTime(date);\r\n    }\r\n\r\n    // Create a m or km string depending on the size of the number\r\n    static format_MeterKilometer(numberInM: number) {\r\n        if (numberInM < 1000) {\r\n            return numberInM + \" m\";\r\n        } else {\r\n            return (numberInM / 1000).toFixed(1) + \" km\";\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Format activity duration into on of the following:\r\n     * - 'MM:SS'\r\n     * - 'HH:MM'\r\n     * - 'x days (y hours)'\r\n     */\r\n    static format_ActivityDuration(durationInS: number) {\r\n        const DurInM = Math.round(durationInS / 60);\r\n\r\n        if (DurInM < 60) {\r\n            return Formatter.fillZeros(DurInM) + \":\" + Formatter.fillZeros(durationInS % 60) + \" min\";\r\n        } else {\r\n            let DurInH = Math.round(DurInM / 60);\r\n            if (DurInH < 24) {\r\n                return Formatter.fillZeros(DurInH) + \":\" + Formatter.fillZeros(DurInM % 60) + \" hours\";\r\n            } else {\r\n                let diffInD = Math.round(DurInH / 24);\r\n                return diffInD + \" days \" + (DurInH % 24 === 0 ? \"\" : DurInH % 24 + \" hours\");\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add unit to a given pace\r\n    static format_pace(kmPerHour: number) {\r\n        return kmPerHour.toFixed(1) + \" km/h\";\r\n    }\r\n\r\n    // Add unit to the heart rate\r\n    static format_heartRate(heartRate: number) {\r\n        return heartRate + \" bpm\";\r\n    }\r\n}","import {Formatter} from \"../../utilities/Formatter\";\r\n\r\ninterface Props {\r\n    comment: any,\r\n    newUser: boolean\r\n}\r\n\r\n//comment component format timestamp and comment and style with bulma comment component\r\nconst Comment = (props: Props) => {\r\n    return (\r\n        <article className=\"media\">\r\n            <div className=\"media-content\">\r\n                <div className=\"content has-text-left\">\r\n                    {\r\n                        // Only display username if previous comment was from a different user\r\n                        props.newUser ?\r\n                            <>\r\n                                <strong>{props.comment.name}</strong>\r\n                                <br/>\r\n                            </>\r\n                            :\r\n                            <></>\r\n                    }\r\n                    {props.comment.text}\r\n                    <br/>\r\n                    <p className=\"is-size-7\">{Formatter.formatCommentDate(new Date(Date.parse(props.comment.timestamp)))}</p>\r\n                </div>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n\r\nexport default Comment;","import React, {Component} from \"react\";\r\nimport {BACKEND_URL} from \"../../App\";\r\nimport Comment from './Comment'\r\nimport SessionHandler from \"../../utilities/SessionHandler\";\r\n\r\n/*The component to add at a activity and has the hole comment stuff.\r\n* Here you can insert new comments and see all comments to a specified activity.\r\n* If you looking for a part of the comment component although look in the components folder of the comments*/\r\n\r\ninterface State {\r\n    comments: any[],\r\n    numComments: number\r\n    activity: number\r\n}\r\n\r\nexport default class CommentContainer extends Component<{ activity_id: number }, State> {\r\n    private readonly commentRefreshInterval: any;\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            comments: [],\r\n            numComments: 5,\r\n            activity: props.activity_id\r\n        };\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        this.refreshComments();\r\n\r\n        this.commentRefreshInterval = setInterval(() => {  //set interval\r\n            this.refreshComments();\r\n        }, 15000);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.loadMoreComments = this.loadMoreComments.bind(this);\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // makes all input attributes \"controlled components\"\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        } as unknown as Pick<State, keyof State>);\r\n    }\r\n\r\n    //refresh comments\r\n    refreshComments() {\r\n        fetch(BACKEND_URL + \"interaction/commentIsNew?activity=\" + this.state.activity, {//get as default\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                // Examine the text in the response\r\n                response.json().then((data) => {\r\n                    //console.log(data.Rowdata);\r\n                    this.setState({comments: data.Rowdata});\r\n                });\r\n            } else {\r\n                console.log('Looks like there was a problem. Status Code: ' + response.status);\r\n            }\r\n\r\n        }).catch((error: any) => {\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(\"Fetch failed:\", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    loadMoreComments() {\r\n        this.setState({numComments: this.state.numComments + 5})\r\n    }\r\n\r\n    renderComments() {\r\n        let lengthAll = this.state.comments.length;\r\n        if (lengthAll > 0) {\r\n            let fieldsHTML: JSX.Element[] = []\r\n            let lengthRendered = this.state.numComments;\r\n\r\n            // Display a load more button if not every comment is visible\r\n            if (lengthAll > lengthRendered) {\r\n                fieldsHTML.push(\r\n                    <button\r\n                        className=\"button\"\r\n                        key={\"loadMore_\" + this.props.activity_id}\r\n                        onClick={this.loadMoreComments}\r\n                    >\r\n                        Load older comments\r\n                    </button>);\r\n            }\r\n\r\n            // Render the X most recent comments\r\n            let numFirst = lengthAll - lengthRendered;\r\n            for (let i = numFirst; i < lengthAll; i++) {\r\n                let comment = this.state.comments[i];\r\n                if (comment) {\r\n                    // Also check whether the previous comment was made by the same user\r\n                    let prevComment = this.state.comments[i - 1];\r\n                    let prevName = prevComment && i !== numFirst ? prevComment.name : \"\";\r\n                    fieldsHTML.push(<Comment key={comment.id} comment={comment} newUser={comment.name !== prevName}/>)\r\n                }\r\n            }\r\n\r\n            return fieldsHTML;\r\n        } else {\r\n            return <p className=\"tag is-primary is-medium\">No Comments here yet. Be the first!</p>\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Clear interval and cancel ongoing fetch requests\r\n        clearInterval(this.commentRefreshInterval);\r\n\r\n        this.abortController.abort();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                {this.renderComments()}\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faAngleDown, faAngleUp, faThumbsUp} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport {postData} from \"../Feed/FeedContent\";\r\nimport CommentContainer from \"../comments/CommentContainer\";\r\nimport SessionHandler from \"../../utilities/SessionHandler\";\r\nimport {BACKEND_URL} from \"../../App\";\r\nimport {Formatter} from \"../../utilities/Formatter\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\n// Define title and formatting function for every data entry\r\nexport const activityInfo = {\r\n    distance: { // db unit: Meters\r\n        title: 'Distance',\r\n        format: (distanceInMeters: number) => Formatter.format_MeterKilometer(distanceInMeters)\r\n    },\r\n    duration: { //db unit: seconds\r\n        title: 'Duration',\r\n        format: (durationInSeconds: number) => Formatter.format_ActivityDuration(durationInSeconds)\r\n    },\r\n    pace: {\r\n        title: 'Speed',\r\n        format: (kmPerHour: number) => Formatter.format_pace(kmPerHour)\r\n    },\r\n    averageHeartRate: {\r\n        title: 'Average heart rate',\r\n        format: (heartRate: number) => Formatter.format_heartRate(heartRate)\r\n    },\r\n    altitudeDifference: {\r\n        title: 'Altitude',\r\n        format: (meters: number) => Formatter.format_MeterKilometer(meters)\r\n    }\r\n}\r\n\r\nexport interface activityData {\r\n    distance?: number,\r\n    duration?: number,\r\n    pace?: number,\r\n    averageHeartRate?: number,\r\n    altitudeDifference?: number\r\n}\r\n\r\ninterface ActivityProps {\r\n    postData: postData,\r\n    ownFeed: boolean\r\n}\r\n\r\nexport interface ActivityState {\r\n    showThumbsUp: boolean,\r\n    thumbsUpCounter: number\r\n}\r\n\r\n//Component for an activity Box, to contain a like button, comment section and an activity table\r\nexport class ActivityBox extends React.Component<ActivityProps, ActivityState> {\r\n    private readonly thumbsRefreshInterval: any;\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: ActivityProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showThumbsUp: this.props.postData.thumbUp,\r\n            thumbsUpCounter: this.props.postData.likes\r\n        }\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        this.thumbIsPressed = this.thumbIsPressed.bind(this);\r\n    }\r\n\r\n    thumbIsPressed(event: any) {\r\n        fetch(BACKEND_URL + 'interaction/thumbsUp', {\r\n            method: 'PUT',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            body: JSON.stringify({\r\n                activity: this.props.postData.activity_id,\r\n            }),\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                let likedBefore = this.state.showThumbsUp;\r\n\r\n                // In-/decrement local counter depending on whether the activity was liked before\r\n                this.setState({\r\n                    showThumbsUp: !likedBefore,\r\n                    thumbsUpCounter: (likedBefore ? this.state.thumbsUpCounter - 1 : this.state.thumbsUpCounter + 1)\r\n                });\r\n            } else {\r\n                // Log reponse otherwise\r\n                response.text().then((response) => console.log(response));\r\n            }\r\n        }).catch((error: any) => {\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(\"Fetch failed:\", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Dont refresh thumbs\r\n        clearInterval(this.thumbsRefreshInterval);\r\n\r\n        // Abort all running requests\r\n        this.abortController.abort();\r\n    }\r\n\r\n    render() {\r\n        const props = this.props.postData;\r\n        const image_path = props.sport + '.png';\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">\r\n                        <figure className=\"image is-32x32\">\r\n                            <img src={image_path} alt=\"product\"/>\r\n                        </figure>\r\n                        <div className=\"media-content has-text-left\tpl-2\">\r\n                            <p className=\"title is-4\">{props.sport}</p>\r\n                            <p className=\"subtitle is-6\">\r\n                                <time>{Formatter.formatDateTime(new Date(Date.parse(String(props.addedAt))))}</time>\r\n                                {this.props.ownFeed ? \"\" : <> - <Link className=\"has-text-primary\"\r\n                                                                      to={`/users/${props.username}`}>@{props.username}</Link></>}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"field has-addons\">\r\n                            <button\r\n                                className={`button is-rounded ${this.state.showThumbsUp ? \"is-success\" : \"\"}`}\r\n                                onClick={this.thumbIsPressed}>\r\n                                <span>\r\n                                    {Number(this.state.thumbsUpCounter)}\r\n                                </span>\r\n                                <span className=\"icon\">\r\n                                    <FontAwesomeIcon icon={faThumbsUp}/>\r\n                                </span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"content \">\r\n                        <ActivityTable activityData={props.activityData}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                    <ActivityComments activity_id={props.activity_id}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ------------------------------------------------------------------------------------------------------------------\r\n\r\ninterface TableProps {\r\n    activityData: activityData\r\n}\r\n\r\n//displays an activity table inside an activity feed box\r\nexport class ActivityTable extends React.Component<TableProps, {}> {\r\n    renderTableHeaders(activityData: activityData) {\r\n        let keys = Object.keys(activityData) //get property keys\r\n\r\n        // @ts-ignore\r\n        return keys.map((key) => <th key={key}>{activityInfo[key].title}</th>)\r\n    }\r\n\r\n    renderTableContents(activityData: activityData) {\r\n        let keys = Object.keys(activityData) //get property keys\r\n        let values = Object.values(activityData) // get values\r\n\r\n        // @ts-ignore\r\n        return keys.map((key, index) => <th key={key}>{activityInfo[key].format(values[index])}</th>)\r\n    }\r\n\r\n    render() {\r\n        // Delete \"null\" keys from activityData\r\n        // @ts-ignore\r\n        Object.keys(this.props.activityData).forEach((k: any) => this.props.activityData[k] === null && delete this.props.activityData[k]);\r\n\r\n        return (\r\n            <>\r\n                <table className=\"table is-narrow\">\r\n                    <thead>\r\n                    <tr>{this.renderTableHeaders(this.props.activityData)}</tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    <tr>{this.renderTableContents(this.props.activityData)}</tr>\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// ------------------------------------------------------------------------------------------------------------------\r\n\r\ninterface CommentState {\r\n    showComments: boolean,\r\n    commentText: string\r\n}\r\n\r\ninterface CommentProps {\r\n    activity_id: number\r\n}\r\n\r\nclass ActivityComments extends React.Component<CommentProps, CommentState> {\r\n    private readonly commentContainerChild: React.RefObject<CommentContainer>;\r\n\r\n    constructor(props: CommentProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showComments: false,\r\n            commentText: \"\"\r\n        }\r\n\r\n        this.handleCommentSubmit = this.handleCommentSubmit.bind(this);\r\n\r\n        this.commentContainerChild = React.createRef();\r\n    }\r\n\r\n    handleCommentSubmit(event: any) {\r\n        let commentText = this.state.commentText;\r\n        if (commentText.length > 0) {\r\n            // insert in backend\r\n            fetch(BACKEND_URL + 'interaction/addComment', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: SessionHandler.getAuthToken()\r\n                },\r\n                body: JSON.stringify({\r\n                    text: commentText,\r\n                    activity: this.props.activity_id,\r\n                })\r\n            }).then((response) => {\r\n                if (response.ok) {\r\n                    this.setState({\r\n                        commentText: \"\"\r\n                    })\r\n\r\n                    // Trigger refreshComment in CommentContainer\r\n                    this.commentContainerChild.current?.refreshComments();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"card is-flex-grow-1\">\r\n                <header className=\"card-header\">\r\n                    <p className=\"card-header-title\">Comments</p>\r\n                    <button\r\n                        className=\"card-header-icon\"\r\n                        onClick={() => this.setState({showComments: !this.state.showComments})}\r\n                        aria-label=\"more options\"\r\n                        style={{\r\n                            border: \"none\",\r\n                            backgroundColor: \"inherit\"\r\n                        }}>\r\n                        <span className=\"icon\">\r\n                            <FontAwesomeIcon icon={this.state.showComments ? faAngleUp : faAngleDown}/>\r\n                        </span>\r\n                    </button>\r\n                </header>\r\n                {this.state.showComments ?\r\n                    <>\r\n                        <div className=\"card-content\">\r\n                            <CommentContainer activity_id={this.props.activity_id} ref={this.commentContainerChild}/>\r\n                        </div>\r\n                        <footer className=\"card-footer\">\r\n                            <div className=\"card-footer-item\">\r\n                                <div className=\"field has-addons is-flex-grow-1\">\r\n                                    <div className=\"control is-expanded\">\r\n                                        <input\r\n                                            className=\"input\"\r\n                                            type='text'\r\n                                            value={this.state.commentText}\r\n                                            maxLength={500}\r\n                                            placeholder='Add your comment'\r\n                                            onChange={(event: any) => this.setState({commentText: event.target.value})}\r\n                                            onKeyUp={(event: any) => {\r\n                                                // 13 is enter\r\n                                                if (event.keyCode === 13) this.handleCommentSubmit(event);\r\n                                            }}\r\n                                        />\r\n                                        {\r\n                                            this.state.commentText.length > 0 ?\r\n                                                <p className={`help is-light ${\r\n                                                    this.state.commentText.length === 500 ? \"is-danger\" :\r\n                                                        this.state.commentText.length >= 450 ? \"is-warning\" : \"is-success\"}`}>\r\n                                                    {500 - this.state.commentText.length} chars remaining!\r\n                                                </p> :\r\n                                                <></>\r\n                                        }\r\n                                    </div>\r\n                                    <div className=\"control\">\r\n                                        <button\r\n                                            className=\"button is-primary\"\r\n                                            disabled={this.state.commentText.length === 0}\r\n                                            onClick={this.handleCommentSubmit}>\r\n                                            Send\r\n                                        </button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </footer>\r\n                    </>\r\n                    :\r\n                    <></>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {BACKEND_URL} from \"../../App\";\r\nimport SessionHandler from \"../../utilities/SessionHandler\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSync} from \"@fortawesome/free-solid-svg-icons\";\r\nimport FadeIn from 'react-fade-in';\r\n\r\nimport {ActivityBox, activityData} from \"../activity/ActivityBox\";\r\n\r\n\r\nexport interface postData {\r\n    activity_id: number,\r\n    thumbUp: boolean,\r\n    likes: number,\r\n    activityData: activityData,\r\n    username: string,\r\n    sport: string,\r\n    addedAt: Date\r\n}\r\n\r\ninterface FeedState {\r\n    postData: postData[] | [],\r\n    loaded: boolean,\r\n    hasMore: boolean,\r\n    refreshAnimation: boolean\r\n}\r\n\r\ninterface FeedProps {\r\n    ownFeed: boolean // true: Ownfeed, false: Friendsfeed\r\n}\r\n\r\n// ------------------------------------------------------------------------------------------------------------------\r\n\r\nexport class Feed extends React.Component<FeedProps, FeedState> {\r\n    private readonly abortController: AbortController;\r\n    private readonly refreshInterval;\r\n\r\n    constructor(props: FeedProps) {\r\n        super(props);\r\n        this.state = {\r\n            postData: [],\r\n            loaded: false,\r\n            hasMore: true,\r\n            refreshAnimation: true\r\n        }\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        this.refreshInterval = setInterval(() => {\r\n            if (SessionHandler.getRefreshFeed(props.ownFeed)) {\r\n                SessionHandler.setRefreshFeed(false, props.ownFeed);\r\n                this.refresh();\r\n            }\r\n        }, 1000);\r\n\r\n        // bind function scopes\r\n        this.getFeed = this.getFeed.bind(this);\r\n        this.refresh = this.refresh.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getFeed();\r\n        this.setState({loaded: true});\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.refreshInterval);\r\n\r\n        this.abortController.abort();\r\n    }\r\n\r\n    getFeed() {\r\n        const mode = this.props.ownFeed ? 'own' : 'following'; // determines the feed mode based on the bool prop ownFeed\r\n        const get_url = BACKEND_URL + \"feed/\" + mode + \"?offset=\" + this.state.postData.length;\r\n        fetch(get_url, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accepts: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                return response.json().then(response => {\r\n                    const activities = response[\"activities\"];\r\n                    this.setState({\r\n                        postData: this.state.postData.concat(activities),\r\n                        hasMore: activities.length === 5\r\n                    });\r\n                });\r\n            }\r\n        }).catch((error: any) => {\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(\"Fetch failed:\", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    refresh() {\r\n        //reset postData and\r\n        this.setState({postData: [], refreshAnimation: true}, () => {\r\n            // load new activities\r\n            this.getFeed()\r\n            this.setState({refreshAnimation: false});\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.state.loaded ?\r\n                    <div>\r\n                        {!this.props.ownFeed ?\r\n                            <button className=\"button mb-4 is-success\" onClick={this.refresh}>\r\n                                <FontAwesomeIcon icon={faSync}/>\r\n                            </button> : \"\"\r\n                        }\r\n                        <InfiniteScroll\r\n                            dataLength={this.state.postData.length}\r\n                            next={this.getFeed}\r\n                            hasMore={this.state.hasMore}\r\n                            loader={\r\n                                <div className=\"box\">\r\n                                    <div className=\"control is-loading\">\r\n                                        <input className=\"input is-static\" type=\"text\" readOnly={true}\r\n                                               placeholder=\"Loading ... \"/>\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            endMessage={\r\n                                <p className=\"tag is-primary is-medium mb-5\">No new activities found</p>\r\n                            }\r\n                            scrollThreshold={0.9}\r\n                            scrollableTarget=\"col-1\"\r\n                        >\r\n\r\n                            <FadeIn transitionDuration={300} key={\"fadeIn\" + this.state.refreshAnimation}>\r\n                                {this.state.postData.map((activity: postData, index: number) => (\r\n                                    <div className=\"mb-5\" key={index}><ActivityBox ownFeed={this.props.ownFeed}\r\n                                                                                   postData={activity}/></div>))\r\n                                }\r\n                            </FadeIn>\r\n\r\n                        </InfiniteScroll>\r\n                    </div>\r\n                    : <h1>Not loaded</h1>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport '../../style/App.scss';\r\nimport {Feed} from \"./FeedContent\";\r\n\r\n/*\r\n* Contains the Friends and Own Feed and has the ability to toggle between them.\r\n* */\r\n\r\ninterface State {\r\n    switch: boolean\r\n}\r\n\r\ninterface Props {\r\n}\r\n\r\nexport default class FeedContainer extends React.Component<Props, State> {\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = {\r\n            switch: false\r\n        };\r\n    }\r\n\r\n    switchFeed() {\r\n        this.setState((state) => ({switch: !state.switch}))\r\n    }\r\n\r\n    render() {\r\n        let feed = this.state.switch ? <Feed key={\"Feed1\"} ownFeed={false}/> : <Feed key={\"Feed2\"} ownFeed={true}/>;\r\n\r\n        // The padding of the feed is calculated by the width of the scrollbar (1em) and bulma padding units\r\n        // style switch as 2 columns\r\n        return (\r\n            <div className=\"pr-2 pl-5 pt-3 pb-1\">\r\n                <div className=\"columns is-centered mt-3\">\r\n                    <div className=\"column is-half has-text-right p-0 mr-2\">\r\n                        <label htmlFor=\"feedSwitch\" className=\"is-size-5 is-unselectable\">Own Feed </label>\r\n                    </div>\r\n                    <div className=\"column is-narrow has-text-centered p-0\">\r\n                        <div className=\"field\">\r\n                            <input\r\n                                id=\"feedSwitch\"\r\n                                type=\"checkbox\"\r\n                                className=\"switch is-medium is-rounded is-success\"\r\n                                onChange={() => this.switchFeed()}/>\r\n                            <label htmlFor=\"feedSwitch\" className=\"is-unselectable has-text-centered feedSwitch\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"column is-half has-text-left p-0 ml-2\">\r\n                        <label htmlFor=\"feedSwitch\" className=\"is-size-5 is-unselectable\">Friends Feed</label>\r\n                    </div>\r\n                </div>\r\n\r\n                {feed}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport {Calendar} from \"@fullcalendar/core\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport {BACKEND_URL} from \"../App\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport moment from \"moment\";\r\nimport NotificationBox from \"./NotificationBox\";\r\nimport SessionHandler from \"../utilities/SessionHandler\";\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n    active: boolean;\r\n    title: string;\r\n    startDate: Date;\r\n    endDate: Date;\r\n    date: Date;\r\n    activityEvents: any[];\r\n    notifyMessage: string;\r\n    notifyType: string;\r\n}\r\n\r\nconst initialState = {\r\n    active: false,\r\n    title: \"\",\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n    activityEvents: [],\r\n    date: new Date(),\r\n    notifyMessage: \"\",\r\n    notifyType: \"\",\r\n};\r\n\r\nexport default class FullCalendar extends React.Component<Props, State> {\r\n    private readonly abortController: AbortController;\r\n\r\n    calendar: Calendar | undefined;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = initialState; //init state\r\n        this.abortController = new AbortController();\r\n    }\r\n\r\n    //open and close modal\r\n    action = () => {\r\n        let active = !this.state.active;\r\n        if (active) {\r\n            this.setState(() => ({active: active}));\r\n        } else {\r\n            this.setState(initialState); // reset state on close\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.initCalendar();\r\n        this.getEvents();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.abortController.abort();\r\n    }\r\n\r\n    //create calendar\r\n    initCalendar() {\r\n        if (typeof this.calendar !== \"undefined\") {                 //check if calendar already exists. If exits: destroy old calendar and create new\r\n            this.calendar.destroy();\r\n        }\r\n        const canvas = document.getElementById(\"calendarFull\") as HTMLCanvasElement; //get Canvas Element where Calendar will be displayed\r\n        this.calendar = new Calendar(canvas, {\r\n            initialView: \"dayGridMonth\", //set initial view (Month view)\r\n            firstDay: 1, //set first day on Monday\r\n            dayMaxEvents: 2, //set max events to show per day. Other events display in popup\r\n            timeZone: \"local\",\r\n            headerToolbar: {        //set buttons for navigations/change views\r\n                left: \"prev,next\",\r\n                center: \"title\",\r\n                right: \"today\", //today (to display month of actual day. Disabled if actual month is already displayed)\r\n            },\r\n            eventTimeFormat: {      //event time format\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\", //Display time as e.g. 05:04 instead of 5:4\r\n                hour12: false, //24h Format\r\n            },\r\n            slotLabelFormat: {   //calendar view time format\r\n                hour: \"2-digit\",\r\n                minute: \"2-digit\",\r\n                hour12: false,\r\n            },\r\n            defaultAllDay: true,\r\n            plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin], //add plugins to fullcalendar\r\n            contentHeight: \"auto\",        \r\n            selectable: true,           //enable selection of dates\r\n            select: (info) => this.create(info), //Open create function on select date range\r\n            eventDidMount: (element) => {       // add delete button to events\r\n                let deleteButton = document.createElement(\"button\");\r\n                deleteButton.onclick = () => this.removeEvent(element); //remove event\r\n                deleteButton.className = \"delete\";\r\n                element.el.append(deleteButton);\r\n            },\r\n        });\r\n        this.calendar.render(); //render calendar on document\r\n    }\r\n\r\n    //Get selected dates and open modal to set title of new event\r\n    create(info: any) {\r\n        this.setState({startDate: info.startStr, endDate: info.endStr});\r\n        this.action();\r\n    }\r\n\r\n    //create event\r\n    createEvent() {\r\n        if (this.state.title && this.state.title !== \"\") {\r\n            const event = {\r\n                title: this.state.title,\r\n                start: this.state.startDate,\r\n                end: this.state.endDate,\r\n            };\r\n            this.setEvents(event);\r\n        } else {\r\n            this.setState({\r\n                notifyMessage: \"Title can not be empty\",\r\n                notifyType: \"is-danger\",\r\n            });\r\n        }\r\n    }\r\n\r\n    //get activities as events\r\n    getActivity() {\r\n        fetch(BACKEND_URL + \"activity/get\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken(),\r\n            },\r\n            signal: this.abortController.signal,\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                let activityEvents: any[] = [];\r\n                return response.json().then((response) => {\r\n                    let posts = JSON.parse(response.body);\r\n                    posts.map((item: any) => {                  //get end date of activity with duration and format result\r\n                        let end = moment(item.startedAt)\r\n                            .add(item.duration, \"seconds\")\r\n                            .format(\"YYYY-MM-DD HH:mm:ss\");\r\n                        const event = {\r\n                            id: item.activity_id,\r\n                            title: item.title,\r\n                            start: item.startedAt,\r\n                            end: end,\r\n                            groupId: \"activityEvents\",\r\n                            color: \"green\",\r\n                        };\r\n                        activityEvents.push(event);     //add activities to array\r\n                        return event;\r\n                    });\r\n                    this.calendar?.addEventSource(activityEvents); //add array as event source\r\n                });\r\n            } else {\r\n                return response.json().then((response) => {\r\n                    console.error(\"Fetch has failed:\", response);\r\n                    this.setState({activityEvents: []});\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    //get events from DB\r\n    getEvents() {\r\n        fetch(BACKEND_URL + \"events/get\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken(),\r\n            },\r\n            signal: this.abortController.signal,\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                return response.json().then((response) => {\r\n                    this.calendar?.removeAllEventSources(); //remove old events\r\n                    this.calendar?.addEventSource(JSON.parse(response.body)); //add new events\r\n                    this.getActivity(); //get events fom activity\r\n                });\r\n            } else {\r\n                return response.json().then((response) => {\r\n                    console.error(\"Fetch has failed:\", response);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    //Add new event to database\r\n    setEvents(data: any) {\r\n        fetch(BACKEND_URL + \"events/add\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken(),\r\n            },\r\n            body: JSON.stringify(data),\r\n            signal: this.abortController.signal,\r\n        }).then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then((response) => {\r\n                    console.error(\r\n                        \"Event could not be added to database. Please contact an administrator for more information. Error is: \" +\r\n                        response\r\n                    );\r\n                });\r\n            }\r\n            this.action(); //close modal\r\n            this.getEvents(); //render events to update\r\n        });\r\n    }\r\n\r\n    //remove event from database\r\n    removeEvent(element: any) {\r\n        if (element.event.groupId === \"activityEvents\") {\r\n            element.event.remove(); //remove on frontend\r\n            fetch(BACKEND_URL + \"activity/remove\", {        //remove an activity from database\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    accept: \"application/json\",\r\n                    \"content-type\": \"application/json\",\r\n                    Authorization: SessionHandler.getAuthToken(),\r\n                },\r\n                body: JSON.stringify({id: element.event.id}),\r\n                signal: this.abortController.signal,\r\n            }).then((response) => {\r\n                if (response.ok) {\r\n                    SessionHandler.setRefreshFeed(true);        //Update frontend\r\n                } else {\r\n                    console.error(\"Delete request has failed\");\r\n                }\r\n            });\r\n        } else {\r\n            element.event.remove(); //remove on frontend\r\n            fetch(BACKEND_URL + \"events/remove\", {  //remove an event from database\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    accept: \"application/json\",\r\n                    \"content-type\": \"application/json\",\r\n                    Authorization: SessionHandler.getAuthToken(),\r\n                },\r\n                body: JSON.stringify({id: element.event.id}),\r\n                signal: this.abortController.signal,\r\n            }).then((response) => {\r\n                if (!response.ok) {\r\n                    console.error(\"Delete request has failed\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    //Update state on change in a input field\r\n    handleOnChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState(({\r\n            [name]: value,\r\n        } as unknown) as Pick<State, keyof State>);\r\n    }\r\n\r\n    render() {\r\n        const active = this.state.active ? \"is-active\" : \"\"; //if active is true: show modal. Else hide it\r\n        return (\r\n            <div className=\"box m-5\">\r\n                <div id=\"calendarFull\"/>\r\n                <div className={`modal ${active}`} id=\"CalendarModal\">\r\n                    <div className=\"modal-background\"/>\r\n                    <div className=\"modal-card\">\r\n                        <header className=\"modal-card-head\">\r\n                            <p className=\"modal-card-title\">Create Event</p>\r\n                            <button\r\n                                className=\"delete\"\r\n                                aria-label=\"close\"\r\n                                onClick={() => this.action()}\r\n                            />\r\n                        </header>\r\n                        <section className=\"modal-card-body\">\r\n                            <div className=\"content\">\r\n                                <div className=\"control\">\r\n                                    <NotificationBox\r\n                                        message={this.state.notifyMessage}\r\n                                        type={this.state.notifyType}\r\n                                        hasDelete={false}\r\n                                    />\r\n                                    <label className=\"label\">Event Name</label>\r\n                                    <>\r\n                                        <input\r\n                                            className=\"input\"\r\n                                            id=\"eventTitle\"\r\n                                            name=\"title\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"Event title\"\r\n                                            value={this.state.title}\r\n                                            onChange={(title) => this.handleOnChange(title)}\r\n                                        />\r\n                                    </>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n                        <footer className=\"modal-card-foot\">\r\n                            <button\r\n                                className=\"button is-success\"\r\n                                onClick={() => this.createEvent()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faCheck}/>\r\n                                <span className=\"m-2\">Save</span>\r\n                            </button>\r\n                            <button\r\n                                className=\"button is-danger\"\r\n                                onClick={() => this.action()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faTimes}/>\r\n                                <span className=\"m-2\">Cancel</span>\r\n                            </button>\r\n                        </footer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Chart from \"chart.js/auto\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport en from \"date-fns/locale/en-GB\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport SessionHandler from \"../utilities/SessionHandler\";\r\nimport {BACKEND_URL} from \"../App\";\r\nimport NotificationBox from \"./NotificationBox\";\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n    active: boolean;\r\n    title: string;\r\n    type: string;\r\n    category: string;\r\n    sport: string;\r\n    year: Date;\r\n    fill: boolean;\r\n    array: any[];\r\n    sports: string[];\r\n    switchfunc: boolean;\r\n    notifyMessage: string;\r\n    notifyType: string;\r\n}\r\n\r\nconst colors = [\r\n    \"silver\",\r\n    \"gold\",\r\n    \"red\",\r\n    \"blue\",\r\n    \"orange\",\r\n    \"coral\",\r\n    \"green\",\r\n    \"purple\",\r\n    \"orange\",\r\n    \"black\",\r\n    \"pink\",\r\n    \"navy\",\r\n];\r\n\r\nconst labels = [\r\n    \"Jan.\",\r\n    \"Feb.\",\r\n    \"Mar.\",\r\n    \"Apr.\",\r\n    \"May.\",\r\n    \"Jun.\",\r\n    \"Jul.\",\r\n    \"Aug.\",\r\n    \"Sep.\",\r\n    \"Oct.\",\r\n    \"Nov.\",\r\n    \"Dec.\",\r\n];\r\n\r\nconst types = [\"line\", \"bar\", \"radar\", \"polarArea\", \"doughnut\", \"pie\"];\r\n\r\nconst allCategories = [\r\n    \"distance\",\r\n    \"duration\",\r\n    \"altitudeDifference\",\r\n    \"averageHeartRate\",\r\n    \"pace\",\r\n];\r\n\r\nconst categories = [\"distance\", \"duration\", \"altitudeDifference\"];\r\n\r\nconst averageCategories = [\"averageHeartRate\", \"pace\"];\r\n\r\nconst initialState = {\r\n    active: false,\r\n    title: \"\",\r\n    type: \"line\",\r\n    category: \"distance\",\r\n    sport: \"\",\r\n    fill: false,\r\n    array: [],\r\n    sports: [],\r\n    switchfunc: false,\r\n    year: new Date(),\r\n    notifyMessage: \"\",\r\n    notifyType: \"\",\r\n};\r\n\r\nexport default class Graphs extends React.Component<Props, State> {\r\n    private readonly abortController: AbortController;\r\n    charts: any[];\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = initialState; //init state\r\n        this.charts = [];\r\n        this.abortController = new AbortController();\r\n    }\r\n\r\n    action = () => {\r\n        //open and close modal\r\n        let active = !this.state.active;\r\n        if (active) {\r\n            this.fetchSports(); //fetch sports from database \r\n            this.setState(() => ({active: active}));\r\n        } else {\r\n            this.setState(initialState); //reset state on close\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getCharts(true); //get charts with data on mount\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.abortController.abort();\r\n    }\r\n\r\n    fetchSports() {\r\n        // Fetch sports, users and category from database\r\n        fetch(BACKEND_URL + \"sports/fetch\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken(),\r\n            },\r\n            signal: this.abortController.signal,\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                return response.json().then((response) => {\r\n                    let data = JSON.parse(response.body);\r\n                    let sports = [];\r\n                    sports.push(\"\");\r\n                    for (let key in data) {\r\n                        if (data.hasOwnProperty(key)) {\r\n                            sports.push(key);\r\n                        }\r\n                    }\r\n                    this.setState({sports: sports});\r\n                });\r\n            } else {\r\n                return response.json().then((response) => {\r\n                    console.error(\"Sport Fetch failed:\", response);\r\n                    this.setState({sports: []});\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    //get charts\r\n    getCharts(display: boolean) {\r\n        // Call the API\r\n        fetch(BACKEND_URL + \"charts/get\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken(),\r\n            },\r\n            signal: this.abortController.signal,\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                return response.json().then((response) => {\r\n                    this.setState({array: JSON.parse(response.body)}, () => {\r\n                        if (display) {\r\n                            //if displayed add data to charts and displayed it\r\n                            this.loopOverData(); //get data for each chart\r\n                        }\r\n                    });\r\n                });\r\n            } else {\r\n                return response.json().then((response) => {\r\n                    console.error(\"Failed to get charts: \", response); //error message in console on error\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //loop over each chart\r\n    loopOverData() {\r\n        for (let i = 0; i < this.state.array.length; i++) {\r\n            const chart = {\r\n                //build chart constructor\r\n                name: this.state.array[i].name,\r\n                type: this.state.array[i].type,\r\n                category: this.state.array[i].category,\r\n                fill: this.state.array[i].fill,\r\n                param_sport: this.state.array[i].param_sport,\r\n                year: this.state.array[i].year,\r\n                sqlfunc: this.state.array[i].sqlfunc,\r\n            };\r\n            this.createRequest(chart);\r\n        }\r\n    }\r\n\r\n    //create reqeust depending on values\r\n    createRequest(chart: any) {\r\n        let year, sport, category, sqlfunc;\r\n        const params = new URLSearchParams(); //create query params for request\r\n        if (chart.category) {\r\n            category = chart.category;\r\n            params.append(\"category\", category);\r\n        }\r\n        if (chart.sqlfunc) {\r\n            sqlfunc = chart.sqlfunc;\r\n            params.append(\"sqlfunc\", sqlfunc);\r\n        }\r\n        if (chart.param_sport) {\r\n            sport = chart.param_sport;\r\n            params.append(\"sport\", sport);\r\n        }\r\n        if (chart.year) {\r\n            year = chart.year;\r\n            params.append(\"year\", year);\r\n        }\r\n        const url = BACKEND_URL + \"charts/dataset?\";\r\n        this.getDatasets(url, params, chart); \r\n    }\r\n\r\n    //fetch values from database\r\n    getDatasets(url: string, params: any, chart: any) {\r\n        fetch(url + params, {                   //build URL with params to make request depending on chart\r\n            method: \"GET\",\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken(),\r\n            },\r\n            signal: this.abortController.signal,\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                return response.json().then((response) => {\r\n                    let data = JSON.parse(response.body);\r\n                    this.addElement(chart, data); \r\n                });\r\n            } else {\r\n                return response.json().then((response) => {\r\n                    console.error(\"Fetch has failed:\", response);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    //create chart with data on frontend\r\n    addElement(chart: any, data: any) {\r\n        let buttonNode = document.getElementById(chart.name); \r\n        let chartNode = document.getElementById(\"chart_ID\" + chart.name);\r\n        let chartBoxNode = document.getElementById(\"chartBox_ID\" + chart.name);\r\n        if (!chartNode && !buttonNode && !chartBoxNode) {               //check if elements already exist (should be unique)\r\n            // create new unique div and new unique button for each new chart\r\n            let chartBox = document.createElement(\"div\");           //create box where chart and button will be stored\r\n            chartBox.className = \"box\";\r\n            chartBox.style.maxHeight = \"600px\";\r\n            chartBox.id = \"chartBoxID_\" + chart.name; \r\n            let canvas = document.createElement(\"canvas\");          //Canvas, where chart will be displayed\r\n            canvas.id = \"chartID_\" + chart.name;         \r\n            canvas.style.maxHeight = \"85%\";\r\n            canvas.style.width = \"100%\";                            \r\n            let button = document.createElement(\"button\");          //Button, to delete chart\r\n            button.id = chart.name; //Set button ID to chart title\r\n            button.className = \"button is-danger m-1\";\r\n            button.innerHTML = \"Delete \" + canvas.id;\r\n            button.onclick = (event: any) => this.removeChart(event.target.id); //add delete function to button\r\n            // add created elements to DOM\r\n            let parent = document.getElementById(\"charts\");                 \r\n            parent?.appendChild(chartBox);                                      //append  box as container to parent div\r\n            chartBox?.append(canvas)                                            //append canvas to box\r\n            chartBox?.appendChild(button);                                      //append buttn to box\r\n            this.addCharts(canvas, chart, data);\r\n        } else {\r\n            console.error(\"Element could not be added\");\r\n        }\r\n    }\r\n\r\n    //create chart\r\n    addCharts(canvas: HTMLCanvasElement, chart: any, data: any) {\r\n        let display = true;\r\n        if (                                      //disable x-axis and y-axis for doughnut, polarArea, radar, pie\r\n            chart.type === \"pie\" ||\r\n            chart.type === \"doughnut\" ||\r\n            chart.type === \"polarArea\" ||\r\n            chart.type === \"radar\"\r\n        ) {\r\n            display = false;\r\n        }\r\n        chart.fill = chart.fill === 1;                              //Set fill value to true or false\r\n        let dataArray: any[] = new Array(labels.length);            //array for chart data\r\n        let yLab = this.yLab(chart.category);                       //get unit of measurement for chart\r\n        let subtitle = this.subtitle(                               //create subtitle to add information for displayed chart\r\n            chart.category,\r\n            yLab,\r\n            chart.year,\r\n            chart.param_sport\r\n        ); \r\n        dataArray.fill(0, 0, labels.length);                            //init  charts values\r\n        for (let i = 0; i < data.length; i++) {\r\n            labels.forEach((item, index) => {\r\n                if (data[i].month === index && data[i].amount) {\r\n                    dataArray.splice(index - 1, 1, data[i].amount);      //Set value position depending on label position\r\n                }   \r\n            });\r\n        }\r\n        new Chart(canvas, {                             //Create chart on created canvas\r\n            options: {                  \r\n                responsive: true,                       //set chart static height\r\n                maintainAspectRatio: false,             //disable maintaining ratio of chart when resizing\r\n                scales: {                               //add options to axis\r\n                    x: {\r\n                        display: display,               //enable/disable axis depending on chart type\r\n                        title: {\r\n                            text: \"Month\",\r\n                            display: display,\r\n                        },\r\n                    },\r\n                    y: {\r\n                        display: display,\r\n                        title: {\r\n                            display: display,\r\n                            text: [yLab],           //Display unit\r\n                        },\r\n                    },\r\n                },\r\n                plugins: {\r\n                    title: {                        //set options for chart title and subtitle\r\n                        display: true,\r\n                        color: \"#808080\",\r\n                        text: [chart.name, subtitle],\r\n                        font: {\r\n                            size: 20,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            height: \"auto\",                      \r\n            type: chart.type,                  //Define chart type\r\n            data: {\r\n                labels: labels,                 //set values for y-axis\r\n                datasets: [\r\n                    {\r\n                        label: chart.name,          //add chart title to dataset\r\n                        backgroundColor: colors,    //Set charts colors\r\n                        data: dataArray,            //Set chart data (x-axis values)\r\n                        fill: chart.fill,           //Fill chart\r\n                    },\r\n                ],\r\n            },\r\n        });\r\n    }\r\n\r\n    //Get inputs values then create charts\r\n    configureChart() {\r\n        if (                                    //Check if mandatory values are set else reject request\r\n            this.state.title &&\r\n            this.state.type &&\r\n            this.state.year &&\r\n            this.state.category\r\n        ) {\r\n            this.getCharts(false);\r\n            if (\r\n                !this.state.array.find(\r\n                    (title: { name: string }) => title.name === this.state.title    //Accepts request if title is unique\r\n                )\r\n            ) {\r\n                let sqlfunc;\r\n                if (this.state.switchfunc) {    //Set sql function depending on switch button value\r\n                    sqlfunc = \"sum\";\r\n                } else {\r\n                    sqlfunc = \"avg\";\r\n                }\r\n                let year = this.state.year.getFullYear();   //filter date on year\r\n                const chart = {                                    \r\n                    name: this.state.title,\r\n                    type: this.state.type,\r\n                    category: this.state.category,\r\n                    fill: this.state.fill,\r\n                    param_sport: this.state.sport, \r\n                    year: year,\r\n                    sqlfunc: sqlfunc,\r\n                };\r\n                this.createRequest(chart);   //create request\r\n                this.setCharts(chart);      //Add new chart to DB\r\n                this.action();              //close modal\r\n            } else {                        \r\n                this.setState({\r\n                    notifyMessage:\r\n                        \"Title was already given. Please choose an other title for your chart\",\r\n                    notifyType: \"is-danger\",\r\n                });\r\n            }\r\n        } else {\r\n            this.setState({\r\n                notifyMessage: \"Configuration values are missing\",\r\n                notifyType: \"is-danger\",\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    //Add new chart to DB\r\n    setCharts(chart: any) {\r\n        fetch(BACKEND_URL + \"charts/add\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                accept: \"application/json\",\r\n                \"content-type\": \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken(),\r\n            },\r\n            body: JSON.stringify(chart),\r\n            signal: this.abortController.signal,\r\n        }).then((response) => {\r\n            if (!response.ok) {\r\n                return response.json().then((response) => {\r\n                    this.setState({\r\n                        notifyMessage:\r\n                            \"Event could not be added to database. Please contact an administrator for more information. Error is: \" +\r\n                            response,\r\n                        notifyType: \"is-danger\",\r\n                    });\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    //remove chart with id\r\n    removeChart(id: string) {\r\n        const chartID = \"chartID_\" + id;\r\n        let chart = Chart.getChart(chartID); //get chart object\r\n        if (chart) {\r\n            chart.destroy();                //Destroy chart object on frontend\r\n            this.removeElement(id);         //remove element created with chart\r\n            fetch(BACKEND_URL + \"charts/remove\", {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    accept: \"application/json\",\r\n                    \"content-type\": \"application/json\",\r\n                    Authorization: SessionHandler.getAuthToken(),\r\n                },\r\n                body: JSON.stringify({chartId: id}),\r\n                signal: this.abortController.signal,\r\n            }).then((response) => {\r\n                if (response.ok) {\r\n                    SessionHandler.setRefreshFeed(true);\r\n                } else {\r\n                    console.error(\"Delete request has failed\");\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    //remove chart elements\r\n    removeElement(name: string) {\r\n        let canvas = document.getElementById(\r\n            \"chartID_\" + name\r\n        ) as HTMLCanvasElement;\r\n        let button = document.getElementById(name) as HTMLButtonElement;\r\n        let box = document.getElementById(\"chartBoxID_\" + name) as HTMLDivElement;\r\n        if (canvas.parentNode && button.parentNode && box.parentNode) {\r\n            canvas.parentNode.removeChild(canvas); //remove canvas element\r\n            button.parentNode.removeChild(button); //remove button element\r\n            box.parentNode.removeChild(box);      //remove box after children\r\n        }\r\n    }\r\n\r\n    //get unit of measurement depending on category\r\n    yLab(category: string) {\r\n        let yLab = \"\";\r\n        if (allCategories.includes(category)) {\r\n            switch (category) {\r\n                case \"distance\":\r\n                case \"altitudeDifference\":\r\n                    yLab = \"meter\";\r\n                    break;\r\n                case \"duration\":\r\n                    yLab = \"seconds\";\r\n                    break;\r\n                case \"pace\":\r\n                    yLab = \"km/h\";\r\n                    break;\r\n                case \"effort\":\r\n                    yLab = \"calories\";\r\n                    break;\r\n                case \"averageHeartRate\":\r\n                    yLab = \"BPM\";\r\n                    break;\r\n            }\r\n        }\r\n        return yLab;\r\n    }\r\n\r\n    subtitle(category: string, yLab: string, year: number, sport: string) {\r\n        let subtitle;\r\n        if (sport && sport !== \"\") {\r\n            subtitle = `${category} in ${yLab} per month for ${year} and for ${sport}`; //create subtitle for chart with defined chart\r\n        } else {\r\n            subtitle = `${category} in ${yLab} per month for ${year} and for all sports`; //create subtitle for chart without defined chart\r\n        }\r\n        return subtitle;\r\n    }\r\n\r\n    //render switch button for specific charts\r\n    fill() {\r\n        if (this.state.type === \"line\" || this.state.type === \"radar\") {\r\n            return (\r\n                <div className=\"m-2\">\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        name=\"fill\"\r\n                        className=\"switch\"\r\n                        id=\"fill\"\r\n                        onChange={(fill) => this.handleOnCheck(fill)}\r\n                    />\r\n                    <label className=\"label\" htmlFor=\"fill\">\r\n                        {this.state.fill ? <span>Filled</span> : <span>Not filled</span>}\r\n                    </label>\r\n                </div>\r\n            );\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    //render options for dropdown\r\n    renderOptions(items: any[]) {\r\n        return (\r\n            items &&\r\n            items.length > 0 &&\r\n            items.map((item) => {\r\n                return <option key={item}>{item}</option>;\r\n            })\r\n        );\r\n    }\r\n\r\n    //Update date on change\r\n    handleDateOnChange(date: any) {\r\n        this.setState({year: date});\r\n    }\r\n\r\n    //update input fields on change\r\n    handleOnChange(\r\n        event:\r\n        | React.ChangeEvent<HTMLInputElement>\r\n        | React.ChangeEvent<HTMLSelectElement>\r\n        ) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState(({\r\n            [name]: value,\r\n        } as unknown) as Pick<State, keyof State>);\r\n    }\r\n\r\n    //update checkbox/ switch button on change\r\n    handleOnCheck(event: any) {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        let check = target.checked;\r\n        this.setState(({\r\n            [name]: check,\r\n        } as unknown) as Pick<State, keyof State>);\r\n    }\r\n\r\n    //update categories on switch buttons\r\n    handleCategories() {\r\n        let newCategories = categories;\r\n        if (!this.state.switchfunc) {\r\n            newCategories = newCategories.concat(averageCategories);\r\n        }\r\n        return this.renderOptions(newCategories);\r\n    }\r\n\r\n    render() {\r\n        const active = this.state.active ? \"is-active\" : \"\";\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"divider\">Charts</div>\r\n                <div className=\"controls\">\r\n                    <button className=\"button is-primary\" onClick={() => this.action()}>\r\n                        Add Chart\r\n                    </button>\r\n                </div>\r\n                <div id=\"charts\" className=\"p-5\"/>\r\n                <div className={`modal ${active}`} id=\"ChartModal\">\r\n                    <div className=\"modal-background\"/>\r\n                    <div className=\"modal-card\">\r\n                        <header className=\"modal-card-head\">\r\n                            <p className=\"modal-card-title\">Chart Modal</p>\r\n                            <button\r\n                                className=\"delete\"\r\n                                aria-label=\"close\"\r\n                                onClick={() => this.action()}\r\n                            />\r\n                        </header>\r\n                        <section className=\"modal-card-body\">\r\n                            <div className=\"content\">\r\n                                <div className=\"control\">\r\n                                    <NotificationBox\r\n                                        message={this.state.notifyMessage}\r\n                                        type={this.state.notifyType}\r\n                                        hasDelete={false}\r\n                                    />\r\n                                    <label className=\"label\">Chart Name</label>\r\n                                    <input\r\n                                        className=\"input\"\r\n                                        id=\"chartTitle\"\r\n                                        name=\"title\"\r\n                                        type=\"text\"\r\n                                        placeholder=\"Chart title\"\r\n                                        value={this.state.title}\r\n                                        onChange={(title) => this.handleOnChange(title)}\r\n                                    />\r\n                                    <label className=\"label\">Chart Type</label>\r\n                                    <div className=\"select is-fullwidth mb-5\">\r\n                                        <select\r\n                                            className=\"type\"\r\n                                            name=\"type\"\r\n                                            id=\"type\"\r\n                                            value={this.state.type}\r\n                                            onChange={(type) => this.handleOnChange(type)}\r\n                                        >\r\n                                            {this.renderOptions(types)}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"columns is-centered\">\r\n                                        <div className=\"column is-one-quarter\">\r\n                                            <label className=\"label\">Chart function</label>\r\n                                        </div>\r\n                                        <div className=\"column is-one-quarter\">\r\n                                            <div className=\"field\">\r\n                                                <input\r\n                                                    type=\"checkbox\"\r\n                                                    name=\"switchfunc\"\r\n                                                    className=\"switch\"\r\n                                                    checked={this.state.switchfunc}\r\n                                                    id=\"switchfunc\"\r\n                                                    onChange={(switchfunc) =>\r\n                                                        this.handleOnCheck(switchfunc)\r\n                                                    }\r\n                                                />\r\n                                                <label className=\"label\" htmlFor=\"switchfunc\">\r\n                                                    {this.state.switchfunc ? (\r\n                                                        <span>Sum</span>\r\n                                                    ) : (\r\n                                                        <span>Average</span>\r\n                                                    )}\r\n                                                </label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <label className=\"label\">Filter for category</label>\r\n                                    <div className=\"select is-fullwidth\">\r\n                                        <select\r\n                                            className=\"select is-fullwidth mb-5\"\r\n                                            name=\"category\"\r\n                                            value={this.state.category}\r\n                                            id=\"category\"\r\n                                            onChange={(category) => this.handleOnChange(category)}\r\n                                        >\r\n                                            {this.handleCategories()}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"is-divider\" data-content=\"Optional\"/>\r\n                                    <label className=\"label\">Filter for sport</label>\r\n                                    <div className=\"select is-fullwidth mb-5\">\r\n                                        <select\r\n                                            className=\"sport\"\r\n                                            name=\"sport\"\r\n                                            value={this.state.sport}\r\n                                            id=\"sport\"\r\n                                            onChange={(sport) => this.handleOnChange(sport)}\r\n                                        >\r\n                                            {this.renderOptions(this.state.sports)}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label className=\"label\">Select year</label>\r\n                                        <DatePicker\r\n                                            dateFormat=\"yyyy\"\r\n                                            showYearPicker\r\n                                            selected={this.state.year}\r\n                                            locale={en}\r\n                                            onChange={(date: Date) => this.handleDateOnChange(date)}\r\n                                            minDate={new Date(\"01-01-1900\")}\r\n                                            maxDate={new Date()}\r\n                                            inline\r\n                                        />\r\n                                    </div>\r\n                                    <div>{this.fill()}</div>\r\n                                </div>\r\n                            </div>\r\n                        </section>\r\n                        <footer className=\"modal-card-foot\">\r\n                            <button\r\n                                className={`button is-success`}\r\n                                onClick={() => this.configureChart()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faCheck}/>\r\n                                <span className=\"m-2\">Save</span>\r\n                            </button>\r\n                            <button\r\n                                className=\"button is-danger\"\r\n                                onClick={() => this.action()}\r\n                            >\r\n                                <FontAwesomeIcon icon={faTimes}/>\r\n                                <span className=\"m-2\">Cancel</span>\r\n                            </button>\r\n                        </footer>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Head from \"../components/Head\";\r\nimport Foot from '../components/Foot';\r\nimport FeedContainer from \"../components/Feed/FeedContainer\";\r\nimport Calendar from \"../components/FullCalendar\";\r\nimport Graphs from \"../components/Charts\";\r\n\r\n//Page where User can see after login. Integration of Head, Body and Foot.\r\n\r\nclass Homepage extends React.Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Head/>\r\n                <div id=\"body-content\" className=\"flexColumns has-background-grey-dark\">\r\n                    <div className=\"mainColumn hasScrollbar\" id=\"col-1\">\r\n                        <FeedContainer/>\r\n                    </div>\r\n                    <div className=\"divider is-vertical px-2 m-0\"/>\r\n                    <div className=\"mainColumn hasScrollbar\" id=\"col-2\">\r\n                        <Calendar/>\r\n                        <Graphs/>\r\n                    </div>\r\n                </div>\r\n                <Foot/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage\r\n\r\n","import React, {Component} from \"react\";\r\nimport NotificationBox from \"../NotificationBox\";\r\nimport {BACKEND_URL, FRONTEND_URL, PAGE_TITLE} from \"../../App\";\r\nimport {Helmet} from \"react-helmet\";\r\n\r\ninterface State {\r\n    email: string,\r\n    password: string,\r\n    errorMessage: string\r\n}\r\n\r\nexport default class Login extends Component<{}, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            errorMessage: ''\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        } as Pick<State, keyof State>);\r\n    }\r\n\r\n    handleSubmit(event: React.MouseEvent<HTMLButtonElement>) {\r\n        const email = this.state.email;\r\n        const pw = this.state.password;\r\n        event.preventDefault();\r\n\r\n        if (!(email === '' || pw === '')) {\r\n            //sends User credentials to API\r\n\r\n            fetch(BACKEND_URL + 'login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    emailOrUsername: email,\r\n                    password: pw\r\n                })\r\n            }).then((response) => {\r\n                if (response.status === 200) {\r\n                    response.json().then((data) => {\r\n                        if (data.token) {\r\n                            // handle Access token and save it to session storage\r\n                            sessionStorage.setItem('AccessToken', data.token); // if AccessToken != null --> User is logged in\r\n                            // save the username in Session Storage\r\n                            // JWT Has the following Syntax: XXXXXXXX.XXXXXXXX.XXXXXXXX where X is a Base64 encoded string\r\n                            // The middle part contains the username and other things in JSON format --> get middle part, decode it from\r\n                            // Base64 (with js function atob())\r\n                            const splitToken = data.token.split('.');\r\n                            const decodedJSON = JSON.parse(atob(splitToken[1]));\r\n                            sessionStorage.setItem('username', decodedJSON.username);\r\n\r\n                            // Redirect\r\n                            window.location.href = FRONTEND_URL;\r\n                        } else {\r\n                            this.setState({errorMessage: \"Login Error Occured\"});\r\n                        }\r\n                    });\r\n                } else if (response.status === 401) {\r\n                    this.setState({errorMessage: \"You have entered an invalid username or password\"});\r\n                } else {\r\n                    this.setState({errorMessage: \"Error!\"});\r\n                }\r\n            });\r\n        } else {\r\n            this.setState({errorMessage: 'Please enter an email and a password!'})\r\n        }\r\n    }\r\n\r\n    //return rendered component\r\n    render() {\r\n        return (\r\n            <>\r\n                <Helmet>\r\n                    <title>{PAGE_TITLE} | Login</title>\r\n                </Helmet>\r\n                <section className=\"section\">\r\n                    <div className=\"columns is-centered\">\r\n                        <div className=\"column is-5-tablet is-4-desktop is-3-widescreen\">\r\n                            <form className=\"box \">\r\n                                <h3 className=\"title\">Log in</h3>\r\n\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\">Email or username</label>\r\n                                    <div className=\"control\">\r\n                                        <input type=\"email\" autoFocus name=\"email\" className=\"input\" autoComplete=\"username\"\r\n                                               placeholder=\"Enter email\"\r\n                                               value={this.state.email} onChange={this.handleChange}/>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"field\">\r\n                                    <label className=\"label\">Password</label>\r\n                                    <div className=\"control\">\r\n                                        <input type=\"password\" name=\"password\" className=\"input\" autoComplete=\"current-password\"\r\n                                               placeholder=\"Enter password\"\r\n                                               value={this.state.password} onChange={this.handleChange}/>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <NotificationBox message={this.state.errorMessage} type={\"is-danger\"}\r\n                                                 hasDelete={false}/>\r\n\r\n                                <button className=\"button is-primary\" onClick={this.handleSubmit}>Sign in</button>\r\n                                <br/>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    }\r\n}","/*\r\n/ class for all regex validations\r\n */\r\n\r\nexport class RegexValidator{\r\n    static validateEmail(email: string) {\r\n        // email regex\r\n        return /^[^@]+@\\w+(\\.\\w+)+\\w$/.test(email);\r\n    }\r\n\r\n    static validatePassword(password: string) {\r\n        // regex for: min 8 letter password, with at least a symbol, upper and lower case letters and a number\r\n        return /^(?=.*\\d)(?=.*[!@#$%^&_*-])(?=.*[a-z])(?=.*[A-Z]).{8,}$/.test(password);\r\n    }\r\n\r\n    static validateUsername(username: string){\r\n        // regex: 20 alphanumeric characters and \"_\" / \"-\"\r\n        return /^([\\w_-]{1,20})$/.test(username);\r\n    }\r\n\r\n    static validateName(name: string){\r\n        // regex: 30 alphanumeric characters and \"-, ä, ö, ü\"\r\n        return /^([A-Za-z-äöü]{1,30})$/.test(name);\r\n    }\r\n}","import React, {Component} from \"react\";\r\nimport NotificationBox from \"../NotificationBox\";\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {BACKEND_URL, FRONTEND_URL, PAGE_TITLE} from \"../../App\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport {RegexValidator} from \"../../utilities/RegexValidator\"\r\n\r\ninterface State {\r\n    firstname: string,\r\n    lastname: string,\r\n    email: string,\r\n    password1: string,\r\n    password2: string,\r\n    username: string,\r\n    weight: number,\r\n    date: Date,\r\n    dateChange: Boolean,\r\n    errorMessage: string,\r\n    errorType: string\r\n}\r\n\r\nexport default class SignUp extends Component<{}, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            firstname: '',\r\n            lastname: '',\r\n            email: '',\r\n            password1: '',\r\n            password2: '',\r\n            username: '',\r\n            weight: 0,\r\n            date: new Date(),\r\n            dateChange: false,\r\n            errorMessage: '',\r\n            errorType: 'is-danger'\r\n        };\r\n\r\n        // bind scopes to functions in order to use this.setState\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // makes all input attributes \"controlled components\"\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        } as unknown as Pick<State, keyof State>);\r\n    }\r\n\r\n    handleDateChange(date: Date) {\r\n        this.setState({date: date, dateChange: true});\r\n    }\r\n\r\n    handleSubmit(event: React.MouseEvent<HTMLButtonElement>) {\r\n        const email = this.state.email;\r\n        const pw1 = this.state.password1;\r\n        const pw2 = this.state.password2;\r\n        const firstname = this.state.firstname;\r\n        const lastname = this.state.lastname;\r\n        const username = this.state.username;\r\n        const weight = this.state.weight;\r\n        event.preventDefault();\r\n\r\n        if (!(email === '' || pw1 === '' || pw2 === '' || firstname === '' || lastname === '' || username === '' || weight === 0 || !this.state.dateChange)) {\r\n            //all inputs must be filled\r\n            if (RegexValidator.validateName(firstname) && RegexValidator.validateName(lastname)) {\r\n                //firstname/Lastname max 30 characters\r\n                if (RegexValidator.validateUsername(username)) {\r\n                    //username max 20 characters\r\n                    if (RegexValidator.validateEmail(email)) {\r\n                        //email must have correct form\r\n                        if (weight >= 10 && weight <= 400) {\r\n                            if (pw1 === pw2) {\r\n                                //the passwords must be equal\r\n                                if (RegexValidator.validatePassword(pw1)) {\r\n                                    // password must have at least 8 letters, a symbol, upper case letters and a number\r\n\r\n                                    // set date to date string\r\n                                    const dateString = this.state.date.toISOString().slice(0, 10);\r\n\r\n                                    //sends User credentials to API\r\n\r\n                                    fetch(BACKEND_URL + 'signup', {\r\n                                        method: 'POST',\r\n                                        headers: {\r\n                                            Accept: 'application/json',\r\n                                            'Content-Type': 'application/json'\r\n                                        },\r\n                                        body: JSON.stringify({\r\n                                            firstname: firstname,\r\n                                            lastname: lastname,\r\n                                            email: email,\r\n                                            password: pw1,\r\n                                            username: username,\r\n                                            date: dateString,\r\n                                            weight: weight\r\n                                        })\r\n                                    }).then((response) => {\r\n                                        if (response.ok) {\r\n                                            if (response.status === 201) {\r\n                                                //update error message: --> success\r\n                                                this.setNotification(\"The user was created!\", false);\r\n\r\n                                                //redirect to confirmation page\r\n                                                window.location.href = FRONTEND_URL + \"successful-signup\";\r\n                                            } else {\r\n                                                //update error message: --> no success\r\n                                                this.setNotification(\"The given username or email already exists!\");\r\n                                            }\r\n                                        } else {\r\n                                            this.setNotification(\"A server error occurred!\");\r\n                                        }\r\n                                    });\r\n                                } else {\r\n                                    this.setNotification('Your password must have at least 8 letters, a symbol, an upper case letter and a number');\r\n                                }\r\n                            } else {\r\n                                this.setNotification('The passwords must be equal!');\r\n                            }\r\n                        } else {\r\n                            this.setNotification('Please enter a real weight!');\r\n                        }\r\n                    } else {\r\n                        this.setNotification('Please enter a correct email!');\r\n                    }\r\n                } else {\r\n                    this.setNotification('The username must have max. 20 alphanumeric characters or ( - , _ )');\r\n                }\r\n            } else {\r\n                this.setNotification('The firstname/lastname must have 30 alphanumeric characters or less');\r\n            }\r\n        } else {\r\n            this.setNotification('Please fill out every field!');\r\n        }\r\n    }\r\n\r\n    setNotification(message: string, isError: boolean = true) {\r\n        this.setState({\r\n            errorMessage: message,\r\n            errorType: isError ? \"is-danger\" : \"is-success\"\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Helmet>\r\n                    <title>{PAGE_TITLE} | Sign-Up</title>\r\n                </Helmet>\r\n                <section className=\"section\">\r\n                    <div className=\"columns is-centered\">\r\n                        <div className=\"column is-5-tablet is-4-desktop is-3-widescreen\">\r\n                            <form className=\"box\">\r\n                                <h3 className=\"title\">Register</h3>\r\n\r\n                                <div className=\"field is-horizontal\">\r\n                                    <div className=\"field-label is-normal\">\r\n                                        <label className=\"label\">Name</label>\r\n                                    </div>\r\n                                    <div className=\"field-body\">\r\n                                        <div className=\"field\">\r\n                                            <input autoFocus name=\"firstname\" type=\"text\" className=\"input\"\r\n                                                   placeholder=\"First name\"\r\n                                                   value={this.state.firstname} onChange={this.handleChange}/>\r\n                                        </div>\r\n                                        <div className=\"field\">\r\n                                            <input name=\"lastname\" type=\"text\" className=\"input\" placeholder=\"Last name\"\r\n                                                   value={this.state.lastname} onChange={this.handleChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"field is-horizontal\">\r\n                                    <div className=\"field-label is-normal\">\r\n                                        <label className=\"label\">Username</label>\r\n                                    </div>\r\n                                    <div className=\"field-body\">\r\n                                        <div className=\"field\">\r\n                                            <input name=\"username\" type=\"text\" className=\"input\" autoComplete=\"username\"\r\n                                                   placeholder=\"Enter username\"\r\n                                                   value={this.state.username} onChange={this.handleChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"field is-horizontal\">\r\n                                    <div className=\"field-label is-normal\">\r\n                                        <label className=\"label\">Email</label>\r\n                                    </div>\r\n                                    <div className=\"field-body\">\r\n                                        <div className=\"field\">\r\n                                            <input name=\"email\" type=\"email\" className=\"input has-icons-left\"\r\n                                                   placeholder=\"Enter email\"\r\n                                                   value={this.state.email} onChange={this.handleChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <hr/>\r\n\r\n                                <div className=\"field is-horizontal\">\r\n                                    <div className=\"field-label is-normal\">\r\n                                        <label className=\"label\">Date of Birth</label>\r\n                                    </div>\r\n                                    <div className=\"field-body\">\r\n                                        <div className=\"field\">\r\n                                            <DatePicker selected={this.state.date} onChange={this.handleDateChange}\r\n                                                        dateFormat=\"dd.MM.yyyy\"/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"field is-horizontal\">\r\n                                    <div className=\"field-label is-normal\">\r\n                                        <label className=\"label\">Weigth (kg)</label>\r\n                                    </div>\r\n                                    <div className=\"field-body\">\r\n                                        <div className=\"field\">\r\n                                            <input name=\"weight\" type=\"number\" className=\"input\"\r\n                                                   placeholder=\"Enter weight\"\r\n                                                   min=\"10\" max=\"200\"\r\n                                                   value={this.state.weight} onChange={this.handleChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <hr/>\r\n\r\n                                <div className=\"field is-horizontal\">\r\n                                    <div className=\"field-label is-normal\">\r\n                                        <label className=\"label\">Password</label>\r\n                                    </div>\r\n                                    <div className=\"field-body\">\r\n                                        <div className=\"field\">\r\n                                            <input name=\"password1\" type=\"password\" className=\"input\" autoComplete=\"new-password\"\r\n                                                   placeholder=\"Enter password\"\r\n                                                   value={this.state.password1} onChange={this.handleChange}/>\r\n                                        </div>\r\n                                        <div className=\"field\">\r\n                                            <input name=\"password2\" type=\"password\" className=\"input\" autoComplete=\"new-password\"\r\n                                                   placeholder=\"Confirm password\"\r\n                                                   value={this.state.password2} onChange={this.handleChange}/>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <br/>\r\n\r\n                                <NotificationBox message={this.state.errorMessage} type={this.state.errorType}\r\n                                                 hasDelete={false}/>\r\n\r\n                                <button className=\"button is-primary\" onClick={this.handleSubmit}>Register</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import {Switch} from \"react-router\";\r\nimport Login from \"../components/login/Login\";\r\nimport SignUp from \"../components/login/SignUp\";\r\nimport {Route} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport Head from \"../components/Head\";\r\n\r\nexport default class LoginContainer extends React.Component<any, any> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Head/>\r\n                <div className=\"hero is-fullheight-with-navbar has-background-grey-dark\">\r\n                    <Switch>\r\n                        <Route exact path='/' component={Login}/>\r\n                        <Route path=\"/login\" component={Login}/>\r\n                        <Route path=\"/sign-up\" component={SignUp}/>\r\n                    </Switch>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}","import {Route, Redirect, RouteProps} from 'react-router';\r\n\r\nexport type ProtectedRouteProps = {\r\n    /*\r\n    /Specify a bool function that determines the rendered result.\r\n    /True: Return a Route with the specified props\r\n    /False: Returns a redirect to \"redirectPath\"\r\n     */\r\n    AuthenticationFunction(): boolean;\r\n\r\n    // The path to be redirect to\r\n    redirectPath: string;\r\n} & RouteProps;\r\n\r\n// This component is used to protect a route from unwanted access\r\nexport default function ProtectedRoute({\r\n                                           AuthenticationFunction: isAuthorized,\r\n                                           redirectPath: redirect,\r\n                                           ...otherProps\r\n                                       }: ProtectedRouteProps) {\r\n    if (isAuthorized()) {\r\n        return <Route {...otherProps} />;\r\n    } else {\r\n        // Remove component from props to prevent warnings\r\n        delete otherProps.component;\r\n        return (\r\n            <Route {...otherProps}>\r\n                <Redirect to={redirect}/>\r\n            </Route>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {FRONTEND_URL} from \"../../App\";\r\n\r\ninterface State {\r\n    progress: number\r\n}\r\n\r\nexport default class Verify extends React.Component<any, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            progress: 0\r\n        }\r\n    }\r\n\r\n    Sleep(milliseconds: number) {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds));\r\n    }\r\n\r\n    async componentDidMount() {\r\n        //animate progressbar and redirect\r\n        for (let progress = 0; progress < 101; progress++) {\r\n            await this.Sleep(20);\r\n            this.setState({progress: progress});\r\n        }\r\n\r\n        //redirect to Login page\r\n        window.location.href = FRONTEND_URL + \"login\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight has-background-grey-dark\">\r\n                <section className=\"section\">\r\n                    <div className=\"columns is-centered\">\r\n                        <div className=\"column is-5-tablet is-4-desktop is-3-widescreen\">\r\n                            <br/><br/><br/>\r\n                            <form className=\"box \">\r\n                                <p>Your Email was successfully verified!</p>\r\n                                <p>You can login now!</p>\r\n                                <br/>\r\n                                <progress className=\"progress is-success\" value={this.state.progress} max=\"100\">60%\r\n                                </progress>\r\n                            </form>\r\n\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class SuccessfulSignup extends React.Component<any, any> {\r\n    render() {\r\n        return (\r\n            <div className=\"hero is-fullheight has-background-grey-dark\">\r\n            <section className=\"section\">\r\n                <div className=\"columns is-centered\">\r\n                    <div className=\"column is-5-tablet is-4-desktop is-3-widescreen\">\r\n                        <br/><br/><br/>\r\n                        <form className=\"box \">\r\n                            <p>Your Registration is almost complete!</p>\r\n                            <br/>\r\n                            <p>We´ve send you an email to confirm your account!</p>\r\n                            <br/>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {postData} from \"../Feed/FeedContent\";\r\nimport {Formatter} from \"../../utilities/Formatter\";\r\nimport {ActivityTable} from \"../activity/ActivityBox\";\r\nimport {ActivityState} from \"../activity/ActivityBox\";\r\n\r\ninterface ProfileActivityProps {\r\n    postData: postData\r\n}\r\n\r\n//Component for an activity Box on the profile page, to contain a like counter and an activity table\r\nexport class ProfileActivityBox extends React.Component<ProfileActivityProps, ActivityState> {\r\n    private readonly thumbsRefreshInterval: any;\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: ProfileActivityProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showThumbsUp: false,\r\n            thumbsUpCounter: 0\r\n        }\r\n\r\n        this.abortController = new AbortController();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // Dont refresh thumbs\r\n        clearInterval(this.thumbsRefreshInterval);\r\n\r\n        // Abort all running requests\r\n        this.abortController.abort();\r\n    }\r\n\r\n    render() {\r\n        const props = this.props.postData;\r\n        const image_path = \"/\" + props.sport + '.png';\r\n        return (\r\n            <div className=\"card\">\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">\r\n                        <figure className=\"image is-32x32\">\r\n                            <img src={image_path} alt=\"product\"/>\r\n                        </figure>\r\n                        <div className=\"media-content has-text-left\tpl-2\">\r\n                            <p className=\"title is-4\">{props.sport}</p>\r\n                            <p className=\"subtitle is-6\">\r\n                                <time>{Formatter.formatDateTime(new Date(Date.parse(String(props.addedAt))))}</time>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"content \">\r\n                        <ActivityTable activityData={props.activityData}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\nimport {postData} from \"../Feed/FeedContent\";\r\nimport {BACKEND_URL} from \"../../App\";\r\nimport SessionHandler from \"../../utilities/SessionHandler\";\r\nimport {ProfileActivityBox} from \"./ProfileActivityBox\"\r\n\r\ninterface profileActivitiesProps {\r\n    username: string\r\n}\r\n\r\ninterface profileActivitiesState {\r\n    postData: postData[] | [],\r\n}\r\n\r\nexport class ProfileActivityContainer extends React.Component<profileActivitiesProps, profileActivitiesState> {\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: profileActivitiesProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            postData: []\r\n        }\r\n\r\n        this.abortController = new AbortController();\r\n        this.getLastActivities = this.getLastActivities.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        //get most recent activities (2)\r\n        this.getLastActivities(2)\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<profileActivitiesProps>, prevState: Readonly<profileActivitiesState>, snapshot?: any) {\r\n        if (prevProps.username !== this.props.username) {\r\n            this.getLastActivities(2);\r\n        }\r\n    }\r\n\r\n    // get the X most recent activities for a given user\r\n    getLastActivities(numberOfActivities: number) {\r\n        const get_url = BACKEND_URL + \"feed/own?offset=0&user=\" + this.props.username;\r\n        fetch(get_url, {\r\n            method: \"GET\",\r\n            headers: {\r\n                Accepts: \"application/json\",\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                return response.json().then(response => {\r\n                    const activities = response[\"activities\"];\r\n                    this.setState({\r\n                        postData: activities.slice(0, numberOfActivities)\r\n                    });\r\n                });\r\n            }\r\n        }).catch((error: any) => {\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(\"Fetch failed:\", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.abortController.abort()\r\n    }\r\n\r\n    render() {\r\n        const postData = this.state.postData;\r\n        return (\r\n            <>\r\n                {\r\n                    postData.length > 0 ?\r\n                        postData.map((activity: postData, index: number) => (\r\n                                <div className=\"mb-5\" key={\"user_feed_\" + this.props.username + index}>\r\n                                    <ProfileActivityBox postData={activity}/>\r\n                                </div>\r\n                            )\r\n                        )\r\n                        :\r\n                        <p className=\"tag is-primary is-medium\">{this.props.username} has no activities!</p>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport Head from '../components/Head';\r\nimport Foot from '../components/Foot';\r\nimport SessionHandler from \"../utilities/SessionHandler\";\r\nimport {BACKEND_URL, PAGE_TITLE} from \"../App\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport NotificationBox from \"../components/NotificationBox\";\r\nimport {postData} from \"../components/Feed/FeedContent\";\r\nimport {ProfileActivityContainer} from \"../components/profile/ProfileActivities\";\r\nimport {Formatter} from \"../utilities/Formatter\";\r\nimport {RegexValidator} from \"../utilities/RegexValidator\";\r\n\r\ninterface OwnState {\r\n    username: string,\r\n    firstname: string,\r\n    lastname: string,\r\n    email: string,\r\n    date: Date,\r\n    dateChange: Boolean,\r\n    weight: number | string,\r\n\r\n    firstnamePlaceholder: string;\r\n    lastnamePlaceholder: string;\r\n    weightPlaceholder: string;\r\n    emailPlaceholder: string;\r\n\r\n    notifyMessage: string,\r\n    notifyType: string\r\n}\r\n\r\n//Profile page\r\nexport class OwnProfile extends React.Component<any, OwnState> {\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: SessionHandler.getUsername(),\r\n            firstname: '',\r\n            lastname: '',\r\n            date: new Date(),      //it is now date\r\n            dateChange: false,\r\n            weight: '',\r\n            email: '',\r\n\r\n            firstnamePlaceholder: 'Add your firstname',\r\n            lastnamePlaceholder: 'Add your lastname',\r\n            weightPlaceholder: 'Add your weight',\r\n            emailPlaceholder: 'Add your email',\r\n\r\n            notifyMessage: '',\r\n            notifyType: 'is-danger',\r\n        };\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        this.getDefaultValues();\r\n\r\n        this.handleDateChange = this.handleDateChange.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.abortController.abort();\r\n    }\r\n\r\n    //get placeholders by loading the Page\r\n    getDefaultValues() {\r\n        fetch(BACKEND_URL + \"users/get/\" + this.state.username, {//get as default\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                // Examine the text in the response\r\n                response.json().then((data) => {\r\n                    this.setState({\r\n                        firstname: data[0].firstname ? '' : this.state.firstname,\r\n                        firstnamePlaceholder: data[0].firstname ? data[0].firstname : this.state.firstnamePlaceholder,\r\n                        lastname: data[0].lastname ? '' : this.state.lastname,\r\n                        lastnamePlaceholder: data[0].lastname ? data[0].lastname : this.state.lastnamePlaceholder,\r\n                        date: data[0].date ? new Date(data[0].date) : this.state.date,\r\n                        weight: data[0].weight ? '' : this.state.weight,\r\n                        weightPlaceholder: data[0].weight ? data[0].weight : this.state.weightPlaceholder,\r\n                        email: data[0].email ? '' : this.state.email,\r\n                        emailPlaceholder: data[0].email ? data[0].email : this.state.emailPlaceholder,\r\n                    });\r\n                });\r\n            } else {\r\n                console.log('Looks like there was a problem. Status Code: ', response.status);\r\n            }\r\n        }).catch((error: any) => {\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(\"Fetch failed:\", error);\r\n            }\r\n        });\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // makes all input attributes \"controlled components\"\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        } as unknown as Pick<OwnState, keyof OwnState>);\r\n    }\r\n\r\n    //if submit new changes to the system\r\n    handleSubmit(event: React.MouseEvent<HTMLButtonElement>) {\r\n        event.preventDefault();\r\n        let date = \"\";\r\n        if (this.state.dateChange) {\r\n            this.setState({dateChange: false});\r\n\r\n            // add a day because the minutes toISOString converts it not right\r\n            const datePlusOneDay = new Date(this.state.date.getTime() + 86400000);\r\n            date = datePlusOneDay.toISOString().slice(0, 10);\r\n        }\r\n\r\n        if (RegexValidator.validateName(this.state.firstname) ||\r\n            (RegexValidator.validateName(this.state.firstnamePlaceholder) && this.state.firstname === \"\")) {\r\n            if (RegexValidator.validateName(this.state.lastname) ||\r\n                (RegexValidator.validateName(this.state.lastnamePlaceholder) && this.state.lastname === \"\")) {\r\n                if ((this.state.weight >= 10 && this.state.weight <= 400) ||\r\n                    (Number(this.state.weightPlaceholder) >= 10 && Number(this.state.weightPlaceholder) <= 400)) {\r\n                    if (RegexValidator.validateEmail(this.state.email) ||\r\n                        (RegexValidator.validateEmail(this.state.emailPlaceholder) && this.state.email === \"\")) {\r\n                        let emailMessage = this.state.email ? ' Please verify your new email before the next login' : '';\r\n\r\n                        //nice put req to parse the data in the DB\r\n                        fetch(BACKEND_URL + 'users/update', {\r\n                            method: 'PUT',\r\n                            headers: {\r\n                                Accept: 'application/json',\r\n                                'Content-Type': 'application/json',\r\n                                Authorization: SessionHandler.getAuthToken()\r\n                            },\r\n                            body: JSON.stringify({\r\n                                firstname: this.state.firstname,\r\n                                lastname: this.state.lastname,\r\n                                date: date,\r\n                                weight: this.state.weight,\r\n                                email: this.state.email,\r\n                            }),\r\n                            signal: this.abortController.signal\r\n                        }).then((response) => {\r\n                            this.getDefaultValues();\r\n                            this.setNotification(response.ok ? \"Your Changes have been saved!\" + emailMessage : \"Something went wrong while saving your changes\", !response.ok);\r\n                        }).catch((error: any) => {\r\n                            if (error.name !== \"AbortError\") {\r\n                                console.log(\"Fetch failed:\", error);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        this.setNotification(\"Please enter a valid email\");\r\n                    }\r\n                } else {\r\n                    this.setNotification(\"Please enter a valid weight\");\r\n                }\r\n            } else {\r\n                this.setNotification(\"Please enter a valid lastname (30 characters)\");\r\n            }\r\n        } else {\r\n            this.setNotification(\"Please enter a valid firstname (30 characters)\");\r\n        }\r\n    }\r\n\r\n    setNotification(message: string, isError: boolean = true) {\r\n        this.setState({\r\n            notifyMessage: message,\r\n            notifyType: isError ? \"is-danger\" : \"is-success\"\r\n        })\r\n    }\r\n\r\n    handleDateChange(date: Date) {\r\n        this.setState({date: date, dateChange: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Helmet>\r\n                    <title>{PAGE_TITLE} | Profile</title>\r\n                </Helmet>\r\n                <Head/>\r\n                <div id=\"body-content\" className=\"has-background-grey-dark hasScrollbar\">\r\n                    <div className=\"container mt-5\">\r\n                        <form className='box'>\r\n                            <p className=\"is-size-4\">Hello {this.state.username},<br/> here you can change your account\r\n                                values</p>\r\n                            <div className='field'>\r\n                                <label className=\"label\">Firstname</label>\r\n                                <input\r\n                                    className=\"input\"\r\n                                    name='firstname'\r\n                                    type='text'\r\n                                    maxLength={30}\r\n                                    placeholder={this.state.firstnamePlaceholder} value={this.state.firstname}\r\n                                    onChange={this.handleChange}/>\r\n                            </div>\r\n                            <div className='field'>\r\n                                <label className=\"label\">Lastname</label>\r\n                                <input\r\n                                    className=\"input\"\r\n                                    name='lastname'\r\n                                    type='text'\r\n                                    maxLength={30}\r\n                                    placeholder={this.state.lastnamePlaceholder} value={this.state.lastname}\r\n                                    onChange={this.handleChange}/>\r\n                            </div>\r\n                            <div className='field'>\r\n                                <label className=\"label\">Date of Birth</label>\r\n                                <DatePicker\r\n                                    maxDate={new Date()}\r\n                                    selected={this.state.date}\r\n                                    showMonthDropdown={true}\r\n                                    showYearDropdown={true}\r\n                                    onChange={this.handleDateChange}\r\n                                    dateFormat=\"dd.MM.yyyy\"/>\r\n                            </div>\r\n                            <div className='field'>\r\n                                <label className=\"label\">Weight</label>\r\n                                <input\r\n                                    className=\"input\"\r\n                                    name='weight'\r\n                                    type='number'\r\n                                    min=\"0\"\r\n                                    max=\"300\"\r\n                                    placeholder={this.state.weightPlaceholder} value={this.state.weight}\r\n                                    onChange={this.handleChange}/>\r\n                            </div>\r\n                            <div className='field'>\r\n                                <label className=\"label\">e-mail</label>\r\n                                <input\r\n                                    className=\"input\"\r\n                                    name='email'\r\n                                    type='email'\r\n                                    maxLength={50}\r\n                                    placeholder={this.state.emailPlaceholder} value={this.state.email}\r\n                                    onChange={this.handleChange}/>\r\n                            </div>\r\n                            <br/>\r\n\r\n                            <NotificationBox\r\n                                message={this.state.notifyMessage}\r\n                                type={this.state.notifyType}\r\n                                hasDelete={false}/>\r\n\r\n                            <button\r\n                                className='button is-black is-outlined'\r\n                                type='submit'\r\n                                onClick={this.handleSubmit}\r\n                            >\r\n                                Change Data\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <Foot/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\ninterface FollowingState {\r\n    username: string,\r\n    firstname: string,\r\n    lastname: string,\r\n    email: string,\r\n    date: Date,\r\n    dateChange: Boolean,\r\n    weight: number | string,\r\n    relationship: any\r\n    postData: postData[] | [],\r\n}\r\n\r\nexport class FollowingPage extends React.Component<any, FollowingState> {\r\n    private readonly abortController: AbortController;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            username: props.match.params.username,\r\n            firstname: '',\r\n            lastname: '',\r\n            date: new Date(),\r\n            dateChange: false,\r\n            weight: '',\r\n            email: '',\r\n            relationship: {},\r\n            postData: [],\r\n        };\r\n\r\n        this.abortController = new AbortController();\r\n\r\n        this.getUserInformation();\r\n\r\n        this.handleBlockClick = this.handleBlockClick.bind(this);\r\n        this.handleFollowClick = this.handleFollowClick.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<FollowingState>, snapshot?: any) {\r\n        // Get new values if username changed\r\n        let newUser = this.props.match.params.username;\r\n        if (this.state.username !== newUser) {\r\n            this.setState({\r\n                username: newUser\r\n            }, () => this.getUserInformation());\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.abortController.abort()\r\n    }\r\n\r\n\r\n    getUserInformation() {\r\n        // Fetch user data\r\n        fetch(BACKEND_URL + \"users/get/\" + this.state.username, {//get as default\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                // Examine the text in the response\r\n                response.json().then((data) => {\r\n                    this.setState({\r\n                        firstname: data[0].firstname,\r\n                        lastname: data[0].lastname,\r\n                        date: new Date(data[0].date),\r\n                        weight: data[0].weight,\r\n                        email: data[0].email\r\n                    }, () => {\r\n\r\n                        // Get their relationship\r\n                        fetch(BACKEND_URL + \"users/getRelationship?user=\" + this.state.username, {\r\n                            method: \"GET\",\r\n                            headers: {\r\n                                Accept: 'application/json',\r\n                                'Content-Type': 'application/json',\r\n                                Authorization: SessionHandler.getAuthToken()\r\n                            },\r\n                            signal: this.abortController.signal\r\n                        }).then((response) => {\r\n                            if (response.ok) {\r\n                                response.json().then((response) => this.setState({\r\n                                    relationship: response\r\n                                }));\r\n                            }\r\n                        }).catch((error: any) => {\r\n                            // Don't react to 'AbortError's\r\n                            if (error.name !== \"AbortError\") {\r\n                                console.log(error);\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            } else if (response.status === 404) {\r\n                this.props.history.push({\r\n                    pathname: \"/NotFound\",\r\n                    state: {username: this.state.username}\r\n                });\r\n            } else {\r\n                console.log('Looks like there was a problem. Status Code: ', response.status);\r\n            }\r\n        }).catch((error: any) => {\r\n            // Don't react to 'AbortError's\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(error);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    handleBlockClick(event: any) {\r\n        let hasBlocked = this.state.relationship.hasBlocked;\r\n        let bodyContent = hasBlocked ? {unblocked: this.state.username} : {toBeBlocked: this.state.username};\r\n\r\n        fetch(BACKEND_URL + \"users/\" + (hasBlocked ? \"un\" : \"\") + \"block\", {\r\n            method: \"PUT\",\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                Authorization: SessionHandler.getAuthToken()\r\n            },\r\n            body: JSON.stringify(bodyContent),\r\n            signal: this.abortController.signal\r\n        }).then((response) => {\r\n            if (response.ok) {\r\n                this.getUserInformation();\r\n            }\r\n        }).catch((error: any) => {\r\n            // Don't react to 'AbortError's\r\n            if (error.name !== \"AbortError\") {\r\n                console.log(error);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    handleFollowClick(event: any) {\r\n        if (!this.state.relationship.isBlocked) {\r\n            let isFollowing = this.state.relationship.following;\r\n            let bodyContent = isFollowing ? {unfollowed: this.state.username} : {followed: this.state.username};\r\n\r\n            fetch(BACKEND_URL + \"users/\" + (isFollowing ? \"un\" : \"\") + \"follow\", {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: SessionHandler.getAuthToken()\r\n                },\r\n                body: JSON.stringify(bodyContent),\r\n                signal: this.abortController.signal\r\n            }).then((response) => {\r\n                if (response.ok) {\r\n                    this.getUserInformation();\r\n                }\r\n            }).catch((error: any) => {\r\n                // Don't react to 'AbortError's\r\n                if (error.name !== \"AbortError\") {\r\n                    console.log(error);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Helmet>\r\n                    <title>{PAGE_TITLE} | {this.state.username}'s profile</title>\r\n                </Helmet>\r\n                <Head/>\r\n                <div id=\"body-content\" className=\"has-background-grey-dark hasScrollbar\">\r\n                    <div className=\"container mt-5\">\r\n                        <div className=\"card is-medium\">\r\n                            <div className=\"card-content\">\r\n                                <div className=\"media\">\r\n                                    <div className=\"media-left\">\r\n                                        <figure className=\"image is-48x48\">\r\n                                            <img src=\"https://bulma.io/images/placeholders/96x96.png\"\r\n                                                 alt=\"Placeholder\"/>\r\n                                        </figure>\r\n                                    </div>\r\n                                    <div className=\"media-content\">\r\n                                        <p className=\"title is-4\">{this.state.firstname} {this.state.lastname}</p>\r\n                                        <p className=\"subtitle is-6\">@{this.state.username}</p>\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"field has-addons is-flex-wrap-wrap is-justify-content-center\">\r\n                                        {\r\n                                            this.state.username !== SessionHandler.getUsername() ?\r\n                                                <>\r\n                                                    <button\r\n                                                        className=\"button is-success m-1\"\r\n                                                        onClick={this.handleFollowClick}\r\n                                                        disabled={this.state.relationship.blocked}\r\n                                                    >\r\n                                                        {(this.state.relationship.following && !this.state.relationship.blocked ? \"Unf\" : \"F\") + \"ollow\"}\r\n                                                    </button>\r\n                                                    <button\r\n                                                        className=\"button is-danger m-1\"\r\n                                                        onClick={this.handleBlockClick}\r\n                                                    >\r\n                                                        {(this.state.relationship.hasBlocked ? \"Unb\" : \"B\") + \"lock\"}\r\n                                                    </button>\r\n                                                </> :\r\n                                                <></>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"content\">\r\n                                    <table className=\"table\">\r\n                                        <thead>\r\n                                        <tr>\r\n                                            <td><b>Date of Birth</b></td>\r\n                                            <td><b>Weight</b></td>\r\n                                            <td><b>E-Mail</b></td>\r\n                                        </tr>\r\n                                        </thead>\r\n                                        <tbody>\r\n                                        <tr>\r\n                                            <td>{Formatter.formatDate(this.state.date)}</td>\r\n                                            <td>{this.state.weight} kg</td>\r\n                                            <td>{this.state.email}</td>\r\n                                        </tr>\r\n                                        </tbody>\r\n                                    </table>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"box mt-4\">\r\n                            <div className=\"divider\">Most Recent Activities</div>\r\n                            <ProfileActivityContainer username={this.state.username}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Foot/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport Head from \"../components/Head\";\r\nimport Foot from \"../components/Foot\";\r\n\r\nexport const NotFound = (props: any) => {\r\n    let username = \"\"\r\n    let state = props.location.state;\r\n    if (state && state.username) {\r\n        username = state.username\r\n    }\r\n\r\n    let type = username.length === 0 ? \"page\" : \"user\";\r\n    let spanText = username.length === 0 ? props.location.pathname.substr(1) : username;\r\n\r\n    return (\r\n        <>\r\n            <Head/>\r\n            <div id=\"body-content\" className=\"has-background-grey-dark hasScrollbar\">\r\n                <div className=\"container\">\r\n                    <div className=\"box m-6\">\r\n                        <h1 className=\"title is-1 has-text-danger\">404 - Not Found</h1>\r\n                        <p className=\"subtitle is-3\">\r\n                            {\r\n                                props.location.pathname !== \"/NotFound\" || username.length > 0 ?\r\n                                    <>\r\n                                        The {type}\r\n                                        <span\r\n                                            className=\"subtitle is-3 is-family-code mx-2\">\r\n                                            '{spanText}'\r\n                                        </span>\r\n                                    </> :\r\n                                    <>\r\n                                        <span>This page </span>\r\n                                    </>\r\n                            }\r\n                            doesn't exist!\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Foot/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import {BrowserRouter, Route} from \"react-router-dom\";\r\nimport Homepage from \"./pages/Homepage\";\r\nimport \"./style/App.scss\";\r\nimport {Component} from \"react\";\r\n\r\nimport SessionHandler from \"./utilities/SessionHandler\";\r\nimport LoginContainer from \"./pages/LoginContainer\";\r\nimport ProtectedRoute from \"./utilities/Routing\";\r\nimport Verify from \"./components/login/Verify\";\r\nimport SuccessfulSignup from \"./components/login/SuccessfulSignUp\";\r\nimport {OwnProfile, FollowingPage} from \"./pages/ProfilePages\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport NotFound from \"./pages/NotFound\";\r\nimport {Switch} from \"react-router\";\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\nexport default class App extends Component<Props, State> {\r\n    render() {\r\n        // Conditional Routing:\r\n        // Route                LoggedIn    NotLoggedIn\r\n        // ____________________________________________\r\n        // \"/\"                  Homepage    Login\r\n        // \"login\"              Homepage    Login\r\n        // \"sign-up\"            Homepage    Sign-Up\r\n        // \"verify\"             Homepage    Verify\r\n        // \"successful-signup\"  Homepage    Successful-Signup\r\n        // \"profile\"            Profile     Login\r\n        // \"users/:username\"    UserPage    Login\r\n        // \"NotFound\"           NotFound    Login\r\n\r\n        // This BrowserRouter handles the routing of the entire application\r\n        return (\r\n            <>\r\n                <Helmet>\r\n                    <title>{PAGE_TITLE}</title>\r\n                </Helmet>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={SessionHandler.isLoggedIn() ? Homepage : LoginContainer}/>\r\n                        <Route exact path=\"/dev\" component={Homepage}/>\r\n                        <ProtectedRoute exact path=\"/login\" component={LoginContainer}\r\n                                        AuthenticationFunction={SessionHandler.isNotLoggedIn} redirectPath={\"/\"}/>\r\n                        <ProtectedRoute exact path=\"/sign-up\" component={LoginContainer}\r\n                                        AuthenticationFunction={SessionHandler.isNotLoggedIn} redirectPath={\"/\"}/>\r\n                        <ProtectedRoute exact path=\"/verify\" component={Verify}\r\n                                        AuthenticationFunction={SessionHandler.isNotLoggedIn} redirectPath={\"/\"}/>\r\n                        <ProtectedRoute exact path=\"/successful-signup\" component={SuccessfulSignup}\r\n                                        AuthenticationFunction={SessionHandler.isNotLoggedIn} redirectPath={\"/\"}/>\r\n                        <ProtectedRoute exact path=\"/profile\" component={OwnProfile}\r\n                                        AuthenticationFunction={SessionHandler.isLoggedIn} redirectPath={\"/\"}/>\r\n                        <ProtectedRoute exact path=\"/users/:username\" component={FollowingPage}\r\n                                        AuthenticationFunction={SessionHandler.isLoggedIn} redirectPath={\"/\"}/>\r\n                        <ProtectedRoute path=\"/NotFound\" component={NotFound}\r\n                                        AuthenticationFunction={SessionHandler.isLoggedIn} redirectPath={\"/\"}/>\r\n                        <Route component={NotFound}/>\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport const PAGE_TITLE = \"Workout-Tracker\";\r\nexport const BACKEND_URL = \"https://workouttracker.server-welt.com:9000/backend/\";\r\nexport const FRONTEND_URL = \"https://workouttracker.server-welt.com/\";\r\n// export const FRONTEND_URL = \"http://localhost:3000/\";\r\n// export const BACKEND_URL = \"http://localhost:9000/backend/\";\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));  //render React App on physical DOM at root (see public/index.html)"],"sourceRoot":""}